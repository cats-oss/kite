{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kite \u00b6 This project is currently in development and the API subject to breaking changes without notice. A Kotlin DSL to bind Android UI components to your app state. Download \u00b6 // TODO Usage \u00b6 Start Kite DSL \u00b6 You can create a KiteDslScope from either Activity or Fragment via extension function kiteDsl : In Actvity : override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) kiteDsl { // Write Kite DSL here } } In Fragment : override fun onViewCreated ( view : View , savedInstanceState : Bundle ?) { kiteDsl { // Write Kite DSL here } } Create State \u00b6 In the KiteDslScope , you can create state via extension function state : kiteDsl { // Create a state with initial value val count = state { 0 } // Assign a new value count . value = 3 // Read the value println ( count . value ) } When you create kiteDsl inside Activity/Fragment , all declared states will be saved into an Android ViewModel . So states can survive after Activity/Fragment recreation. Subscribe to State Change \u00b6 You can create a action that will rerun when its dependent states changed via extension function subscribe : val count = state { 0 } // When click the button, textView.text will change. subscribe { textView . text = count . value . toString () } button . setOnClickListener { count . value ++ } You can subscribe to more than one state: val count1 = state { 0 } val count2 = state { 0 } // Whether count1 or count2 changed, the textView.text will change. subscribe { textView . text = ( count1 . value + count2 . value ). toString () } The action will only rerun when its referenced state changed: val count1 = state { 0 } val count2 = state { 0 } // Will only rerun when count1 changed subscribe { textView1 . text = count1 . value . toString () } // Will only rerun when count2 changed subscribe { textView2 . text = count2 . value . toString () } Use Coroutine \u00b6 KiteDslScope implemented CoroutineScope , so you can use coroutine inside KiteDslScope : val count = state { 0 } button . setOnClickListener { launch { delay ( 1000 ) count1 . value ++ } } Set/Get Contextual Value \u00b6 You can set some contextual value inside KiteDslScope and then get them later: fun KiteDslScope . setCount () { val count = state { 0 } set ( \"count\" , count ) } fun KiteDslScope . getCount () { setCount () val count = get < KiteMutableState < Int >>( \"count\" ) // nullable val count = require < KiteMutableState < Int >>( \"count\" ) // non null } DI Support \u00b6 You can construct a KiteScopeModelFactory and add any dependencies needed into it via addService : @Provide fun provideKiteScopeModelFactory ( repository : Repository ): KiteScopeModelFactory { return KiteScopeModelFactory (). apply { addService ( repository ) } } Then initialize kiteDsl with injected KiteScopeModelFactory . Now all services added into KiteScopeModelFactory will set into KiteDslScope as contextual value: @Inject lateinit var scopeModelFactory : KiteScopeModelFactory kiteDsl ( scopeModelFactory = scopeModelFactory ) { val repository = requireByType < Repository >() } Test \u00b6 It\u2019s better not to directly write Kite DSL inside Activity/Fragment . Instead, separate your business logic and UI binding into separate extension functions of KiteDslScope : data class CounterUseCase ( val count : KiteState < Int >, val increment : () -> Unit , val decrement : () -> Unit ) fun KiteDslScope . counterUseCase (): CounterUseCase { val count = state { 0 } return CounterUseCase ( count = count , increment = { count . value ++ }, decrement = { count . value -- } ) } fun KiteDslScope . bindCounter ( counterUseCase : CounterUseCase ) { val binding = requireByType < FragmentCounterBinding >() subscribe { binding . textView . text = counterUseCase . count . toString () } binding . incrementButton . setOnClickListener { counterUseCase . increment . invoke () } binding . decrementButton . setOnClickListener { counterUseCase . decrement . invoke () } } Now you can test business logic via runTestKiteDsl : @Test fun testCounter () = runTestKiteDsl { val counter = counterUseCase () assert ( counter . count . value == 0 ) counter . increment . invoke () assert ( counter . count . value == 1 ) } Test UI with TestKiteActivity or TestKiteFragment : @Test fun testDisplayCount () = runTestKiteDsl { val factory = TestKiteFragment . makeFactory ( R . layout . fragment_counter , TestKiteFragment . Config { setByType ( FragmentCounterBinding . bind ( it . requireView ())) val count = state { 3 } val counter = CounterUseCase ( count = count , increment = {}, decrement = {} ) bindCounter ( counter ) } ) launchFragmentInContainer < TestKiteFragment >( factory = factory ) . moveToState ( Lifecycle . State . RESUMED ) Espresso . onView ( ViewMatchers . withText ( \"3\" )) . check ( ViewAssertions . matches ( ViewMatchers . isDisplayed ())) } Credits \u00b6 This library is inspired by Vue , and React .","title":"Overview"},{"location":"#kite","text":"This project is currently in development and the API subject to breaking changes without notice. A Kotlin DSL to bind Android UI components to your app state.","title":"kite"},{"location":"#download","text":"// TODO","title":"Download"},{"location":"#usage","text":"","title":"Usage"},{"location":"#start-kite-dsl","text":"You can create a KiteDslScope from either Activity or Fragment via extension function kiteDsl : In Actvity : override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) kiteDsl { // Write Kite DSL here } } In Fragment : override fun onViewCreated ( view : View , savedInstanceState : Bundle ?) { kiteDsl { // Write Kite DSL here } }","title":"Start Kite DSL"},{"location":"#create-state","text":"In the KiteDslScope , you can create state via extension function state : kiteDsl { // Create a state with initial value val count = state { 0 } // Assign a new value count . value = 3 // Read the value println ( count . value ) } When you create kiteDsl inside Activity/Fragment , all declared states will be saved into an Android ViewModel . So states can survive after Activity/Fragment recreation.","title":"Create State"},{"location":"#subscribe-to-state-change","text":"You can create a action that will rerun when its dependent states changed via extension function subscribe : val count = state { 0 } // When click the button, textView.text will change. subscribe { textView . text = count . value . toString () } button . setOnClickListener { count . value ++ } You can subscribe to more than one state: val count1 = state { 0 } val count2 = state { 0 } // Whether count1 or count2 changed, the textView.text will change. subscribe { textView . text = ( count1 . value + count2 . value ). toString () } The action will only rerun when its referenced state changed: val count1 = state { 0 } val count2 = state { 0 } // Will only rerun when count1 changed subscribe { textView1 . text = count1 . value . toString () } // Will only rerun when count2 changed subscribe { textView2 . text = count2 . value . toString () }","title":"Subscribe to State Change"},{"location":"#use-coroutine","text":"KiteDslScope implemented CoroutineScope , so you can use coroutine inside KiteDslScope : val count = state { 0 } button . setOnClickListener { launch { delay ( 1000 ) count1 . value ++ } }","title":"Use Coroutine"},{"location":"#setget-contextual-value","text":"You can set some contextual value inside KiteDslScope and then get them later: fun KiteDslScope . setCount () { val count = state { 0 } set ( \"count\" , count ) } fun KiteDslScope . getCount () { setCount () val count = get < KiteMutableState < Int >>( \"count\" ) // nullable val count = require < KiteMutableState < Int >>( \"count\" ) // non null }","title":"Set/Get Contextual Value"},{"location":"#di-support","text":"You can construct a KiteScopeModelFactory and add any dependencies needed into it via addService : @Provide fun provideKiteScopeModelFactory ( repository : Repository ): KiteScopeModelFactory { return KiteScopeModelFactory (). apply { addService ( repository ) } } Then initialize kiteDsl with injected KiteScopeModelFactory . Now all services added into KiteScopeModelFactory will set into KiteDslScope as contextual value: @Inject lateinit var scopeModelFactory : KiteScopeModelFactory kiteDsl ( scopeModelFactory = scopeModelFactory ) { val repository = requireByType < Repository >() }","title":"DI Support"},{"location":"#test","text":"It\u2019s better not to directly write Kite DSL inside Activity/Fragment . Instead, separate your business logic and UI binding into separate extension functions of KiteDslScope : data class CounterUseCase ( val count : KiteState < Int >, val increment : () -> Unit , val decrement : () -> Unit ) fun KiteDslScope . counterUseCase (): CounterUseCase { val count = state { 0 } return CounterUseCase ( count = count , increment = { count . value ++ }, decrement = { count . value -- } ) } fun KiteDslScope . bindCounter ( counterUseCase : CounterUseCase ) { val binding = requireByType < FragmentCounterBinding >() subscribe { binding . textView . text = counterUseCase . count . toString () } binding . incrementButton . setOnClickListener { counterUseCase . increment . invoke () } binding . decrementButton . setOnClickListener { counterUseCase . decrement . invoke () } } Now you can test business logic via runTestKiteDsl : @Test fun testCounter () = runTestKiteDsl { val counter = counterUseCase () assert ( counter . count . value == 0 ) counter . increment . invoke () assert ( counter . count . value == 1 ) } Test UI with TestKiteActivity or TestKiteFragment : @Test fun testDisplayCount () = runTestKiteDsl { val factory = TestKiteFragment . makeFactory ( R . layout . fragment_counter , TestKiteFragment . Config { setByType ( FragmentCounterBinding . bind ( it . requireView ())) val count = state { 3 } val counter = CounterUseCase ( count = count , increment = {}, decrement = {} ) bindCounter ( counter ) } ) launchFragmentInContainer < TestKiteFragment >( factory = factory ) . moveToState ( Lifecycle . State . RESUMED ) Espresso . onView ( ViewMatchers . withText ( \"3\" )) . check ( ViewAssertions . matches ( ViewMatchers . isDisplayed ())) }","title":"Test"},{"location":"#credits","text":"This library is inspired by Vue , and React .","title":"Credits"},{"location":"changelog/","text":"Change Log \u00b6 TODO","title":"Change Log"},{"location":"changelog/#change-log","text":"TODO","title":"Change Log"},{"location":"api/kite-core/","text":"kite-core Packages \u00b6 Name Summary jp.co.cyberagent.kite.core Index \u00b6 All Types","title":"kite-core"},{"location":"api/kite-core/#packages","text":"Name Summary jp.co.cyberagent.kite.core","title":"Packages"},{"location":"api/kite-core/#index","text":"All Types","title":"Index"},{"location":"api/kite-core/alltypes/","text":"All Types \u00b6 Name Summary jp.co.cyberagent.kite.core.AbstractKiteMutableState Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber. jp.co.cyberagent.kite.core.Invoker0 jp.co.cyberagent.kite.core.Invoker1 jp.co.cyberagent.kite.core.Invoker2 jp.co.cyberagent.kite.core.Invoker3 jp.co.cyberagent.kite.core.Invoker4 jp.co.cyberagent.kite.core.Invoker5 jp.co.cyberagent.kite.core.Invoker6 jp.co.cyberagent.kite.core.KiteContext Persistent context for the KiteDslScope . It behaves like a map. jp.co.cyberagent.kite.core.KiteContextElement jp.co.cyberagent.kite.core.KiteCoroutineDispatchers A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher . jp.co.cyberagent.kite.core.KiteDslMaker jp.co.cyberagent.kite.core.KiteDslScope Define a scope for kite DSL. All kite DSL (like state , memo , etc) is an extension on KiteDslScope . KiteDslScope implements CoroutineScope so you can start coroutine via launch , and async . jp.co.cyberagent.kite.core.KiteMemoScope jp.co.cyberagent.kite.core.KiteMutableState Represents a mutable KiteState that provided a setter for value . Do not implemented this interface directly, instead inherits the abstract class AbstractKiteMutableState . jp.co.cyberagent.kite.core.KiteState Represents a read-only state with single updatable value . jp.co.cyberagent.kite.core.KiteStateCreator Defines how to create KiteMutableState . jp.co.cyberagent.kite.core.KiteSubscribeScope Define a scope for subscribing a action to the change of some KiteState s automatically. jp.co.cyberagent.kite.core.MainThreadChecker A helper interface to determine current thread is main thread or not. jp.co.cyberagent.kite.core.MutableKiteContext A modifiable KiteContext . jp.co.cyberagent.kite.core.Tuple2 jp.co.cyberagent.kite.core.Tuple3 jp.co.cyberagent.kite.core.Tuple4 jp.co.cyberagent.kite.core.Tuple5 jp.co.cyberagent.kite.core.Tuple6","title":"Index"},{"location":"api/kite-core/alltypes/#all-types","text":"Name Summary jp.co.cyberagent.kite.core.AbstractKiteMutableState Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber. jp.co.cyberagent.kite.core.Invoker0 jp.co.cyberagent.kite.core.Invoker1 jp.co.cyberagent.kite.core.Invoker2 jp.co.cyberagent.kite.core.Invoker3 jp.co.cyberagent.kite.core.Invoker4 jp.co.cyberagent.kite.core.Invoker5 jp.co.cyberagent.kite.core.Invoker6 jp.co.cyberagent.kite.core.KiteContext Persistent context for the KiteDslScope . It behaves like a map. jp.co.cyberagent.kite.core.KiteContextElement jp.co.cyberagent.kite.core.KiteCoroutineDispatchers A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher . jp.co.cyberagent.kite.core.KiteDslMaker jp.co.cyberagent.kite.core.KiteDslScope Define a scope for kite DSL. All kite DSL (like state , memo , etc) is an extension on KiteDslScope . KiteDslScope implements CoroutineScope so you can start coroutine via launch , and async . jp.co.cyberagent.kite.core.KiteMemoScope jp.co.cyberagent.kite.core.KiteMutableState Represents a mutable KiteState that provided a setter for value . Do not implemented this interface directly, instead inherits the abstract class AbstractKiteMutableState . jp.co.cyberagent.kite.core.KiteState Represents a read-only state with single updatable value . jp.co.cyberagent.kite.core.KiteStateCreator Defines how to create KiteMutableState . jp.co.cyberagent.kite.core.KiteSubscribeScope Define a scope for subscribing a action to the change of some KiteState s automatically. jp.co.cyberagent.kite.core.MainThreadChecker A helper interface to determine current thread is main thread or not. jp.co.cyberagent.kite.core.MutableKiteContext A modifiable KiteContext . jp.co.cyberagent.kite.core.Tuple2 jp.co.cyberagent.kite.core.Tuple3 jp.co.cyberagent.kite.core.Tuple4 jp.co.cyberagent.kite.core.Tuple5 jp.co.cyberagent.kite.core.Tuple6","title":"All Types"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/","text":"kite-core / jp.co.cyberagent.kite.core Package jp.co.cyberagent.kite.core \u00b6 Types \u00b6 Name Summary AbstractKiteMutableState abstract class AbstractKiteMutableState<T> : KiteMutableState < T > Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber. KiteContext interface KiteContext Persistent context for the KiteDslScope . It behaves like a map. KiteCoroutineDispatchers class KiteCoroutineDispatchers A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher . KiteDslScope interface KiteDslScope : CoroutineScope Define a scope for kite DSL. All kite DSL (like state , memo , etc) is an extension on KiteDslScope . KiteDslScope implements CoroutineScope so you can start coroutine via launch , and async . KiteMemoScope interface KiteMemoScope KiteMutableState interface KiteMutableState<T> : KiteState < T > Represents a mutable KiteState that provided a setter for value . Do not implemented this interface directly, instead inherits the abstract class AbstractKiteMutableState . KiteState interface KiteState<out T> Represents a read-only state with single updatable value . KiteStateCreator interface KiteStateCreator Defines how to create KiteMutableState . KiteSubscribeScope interface KiteSubscribeScope Define a scope for subscribing a action to the change of some KiteState s automatically. MainThreadChecker interface MainThreadChecker A helper interface to determine current thread is main thread or not. MutableKiteContext interface MutableKiteContext : KiteContext A modifiable KiteContext . Tuple3 data class Tuple3<out A, out B, out C> Tuple4 data class Tuple4<out A, out B, out C, out D> Tuple5 data class Tuple5<out A, out B, out C, out D, out E> Tuple6 data class Tuple6<out A, out B, out C, out D, out E, out F> Annotations \u00b6 Name Summary KiteDslMaker annotation class KiteDslMaker Type Aliases \u00b6 Name Summary Invoker0 typealias Invoker0 = () -> Unit Invoker1 typealias Invoker1<A> = ( A ) -> Unit Invoker2 typealias Invoker2<A, B> = ( A , B ) -> Unit Invoker3 typealias Invoker3<A, B, C> = ( A , B , C ) -> Unit Invoker4 typealias Invoker4<A, B, C, D> = ( A , B , C , D ) -> Unit Invoker5 typealias Invoker5<A, B, C, D, E> = ( A , B , C , D , E ) -> Unit Invoker6 typealias Invoker6<A, B, C, D, E, F> = ( A , B , C , D , E , F ) -> Unit KiteContextElement typealias KiteContextElement = Pair < Any , Any > Tuple2 typealias Tuple2<A, B> = Pair < A , B > Properties \u00b6 Name Summary defaultDispatcher val KiteDslScope .defaultDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.default in current context. ioDispatcher val KiteDslScope .ioDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.io in this current context. mainDispatcher val KiteDslScope .mainDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.main in current context. Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass buildKiteContext fun buildKiteContext(builderAction: MutableKiteContext .() -> Unit ): KiteContext Builds a new KiteContext by populating a MutableKiteContext using the given builderAction . checkIsMainThread fun MainThreadChecker .checkIsMainThread(name: String ): Unit Asserts current thread is main thread. If it is not, then throws IllegalStateException . getByType fun <T : Any > KiteContext .getByType(): T ? Returns the value with its KClass as the key. If the key is not found then returns null. getValue operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property. KiteContext fun KiteContext(): KiteContext Creates an empty KiteContext . kiteContextOf fun kiteContextOf(vararg element: KiteContextElement ): KiteContext Returns a new KiteContext with the specified contents, given as a list of pairs where the first value is the key and the second is the value. KiteDslScope fun KiteDslScope(coroutineScope: CoroutineScope, kiteContext: KiteContext ): KiteDslScope Create a simple KiteDslScope from coroutineScope . A default KiteCoroutineDispatchers instance will be set into the kiteContext if absent. memo fun <T> KiteDslScope .memo(computation: KiteMemoScope .() -> T ): KiteState < T > Evaluate the computation during the computation . The evaluation result will be cached into a KiteState . plusAssign operator fun MutableKiteContext .plusAssign(element: KiteContextElement ): Unit Associates the key of element with its value. If the key already existed then throws IllegalStateException require fun <T : Any > KiteContext .require(key: Any ): T Returns the value with the given key . If the key is not found then throws IllegalArgumentException . requireByType fun <T : Any > KiteContext .requireByType(): T Returns the value with its KClass as the key. If the key is not found then throws IllegalArgumentException . setByType fun <T : Any > MutableKiteContext .setByType(value: T ): Unit Associates the value with its KClass as the key. If the key already existed then throws IllegalStateException . setValue operator fun <T> KiteMutableState < T >.setValue(thisRef: Nothing ?, prop: KProperty <*>, value: T ): Unit Supports delegated property. state fun <T> KiteDslScope .state(initialValue: () -> T ): KiteMutableState < T > Find the KiteStateCreator in current context and use it to create a KiteState with initialValue . subscribe fun KiteDslScope .subscribe(action: KiteSubscribeScope .() -> Unit ): Unit Run the action during the action . update fun <T> KiteMutableState < T >.update(f: (curr: T ) -> T ): Unit Updates the value with the result of function f has one parameter that receives current value . withKiteContext fun KiteDslScope .withKiteContext(context: KiteContext , block: KiteDslScope .() -> Unit ): Unit Calls the kite DSL with a given KiteContext .","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/#package-jpcocyberagentkitecore","text":"","title":"Package jp.co.cyberagent.kite.core"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/#types","text":"Name Summary AbstractKiteMutableState abstract class AbstractKiteMutableState<T> : KiteMutableState < T > Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber. KiteContext interface KiteContext Persistent context for the KiteDslScope . It behaves like a map. KiteCoroutineDispatchers class KiteCoroutineDispatchers A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher . KiteDslScope interface KiteDslScope : CoroutineScope Define a scope for kite DSL. All kite DSL (like state , memo , etc) is an extension on KiteDslScope . KiteDslScope implements CoroutineScope so you can start coroutine via launch , and async . KiteMemoScope interface KiteMemoScope KiteMutableState interface KiteMutableState<T> : KiteState < T > Represents a mutable KiteState that provided a setter for value . Do not implemented this interface directly, instead inherits the abstract class AbstractKiteMutableState . KiteState interface KiteState<out T> Represents a read-only state with single updatable value . KiteStateCreator interface KiteStateCreator Defines how to create KiteMutableState . KiteSubscribeScope interface KiteSubscribeScope Define a scope for subscribing a action to the change of some KiteState s automatically. MainThreadChecker interface MainThreadChecker A helper interface to determine current thread is main thread or not. MutableKiteContext interface MutableKiteContext : KiteContext A modifiable KiteContext . Tuple3 data class Tuple3<out A, out B, out C> Tuple4 data class Tuple4<out A, out B, out C, out D> Tuple5 data class Tuple5<out A, out B, out C, out D, out E> Tuple6 data class Tuple6<out A, out B, out C, out D, out E, out F>","title":"Types"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/#annotations","text":"Name Summary KiteDslMaker annotation class KiteDslMaker","title":"Annotations"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/#type-aliases","text":"Name Summary Invoker0 typealias Invoker0 = () -> Unit Invoker1 typealias Invoker1<A> = ( A ) -> Unit Invoker2 typealias Invoker2<A, B> = ( A , B ) -> Unit Invoker3 typealias Invoker3<A, B, C> = ( A , B , C ) -> Unit Invoker4 typealias Invoker4<A, B, C, D> = ( A , B , C , D ) -> Unit Invoker5 typealias Invoker5<A, B, C, D, E> = ( A , B , C , D , E ) -> Unit Invoker6 typealias Invoker6<A, B, C, D, E, F> = ( A , B , C , D , E , F ) -> Unit KiteContextElement typealias KiteContextElement = Pair < Any , Any > Tuple2 typealias Tuple2<A, B> = Pair < A , B >","title":"Type Aliases"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/#properties","text":"Name Summary defaultDispatcher val KiteDslScope .defaultDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.default in current context. ioDispatcher val KiteDslScope .ioDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.io in this current context. mainDispatcher val KiteDslScope .mainDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.main in current context.","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/#functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass buildKiteContext fun buildKiteContext(builderAction: MutableKiteContext .() -> Unit ): KiteContext Builds a new KiteContext by populating a MutableKiteContext using the given builderAction . checkIsMainThread fun MainThreadChecker .checkIsMainThread(name: String ): Unit Asserts current thread is main thread. If it is not, then throws IllegalStateException . getByType fun <T : Any > KiteContext .getByType(): T ? Returns the value with its KClass as the key. If the key is not found then returns null. getValue operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property. KiteContext fun KiteContext(): KiteContext Creates an empty KiteContext . kiteContextOf fun kiteContextOf(vararg element: KiteContextElement ): KiteContext Returns a new KiteContext with the specified contents, given as a list of pairs where the first value is the key and the second is the value. KiteDslScope fun KiteDslScope(coroutineScope: CoroutineScope, kiteContext: KiteContext ): KiteDslScope Create a simple KiteDslScope from coroutineScope . A default KiteCoroutineDispatchers instance will be set into the kiteContext if absent. memo fun <T> KiteDslScope .memo(computation: KiteMemoScope .() -> T ): KiteState < T > Evaluate the computation during the computation . The evaluation result will be cached into a KiteState . plusAssign operator fun MutableKiteContext .plusAssign(element: KiteContextElement ): Unit Associates the key of element with its value. If the key already existed then throws IllegalStateException require fun <T : Any > KiteContext .require(key: Any ): T Returns the value with the given key . If the key is not found then throws IllegalArgumentException . requireByType fun <T : Any > KiteContext .requireByType(): T Returns the value with its KClass as the key. If the key is not found then throws IllegalArgumentException . setByType fun <T : Any > MutableKiteContext .setByType(value: T ): Unit Associates the value with its KClass as the key. If the key already existed then throws IllegalStateException . setValue operator fun <T> KiteMutableState < T >.setValue(thisRef: Nothing ?, prop: KProperty <*>, value: T ): Unit Supports delegated property. state fun <T> KiteDslScope .state(initialValue: () -> T ): KiteMutableState < T > Find the KiteStateCreator in current context and use it to create a KiteState with initialValue . subscribe fun KiteDslScope .subscribe(action: KiteSubscribeScope .() -> Unit ): Unit Run the action during the action . update fun <T> KiteMutableState < T >.update(f: (curr: T ) -> T ): Unit Updates the value with the result of function f has one parameter that receives current value . withKiteContext fun KiteDslScope .withKiteContext(context: KiteContext , block: KiteDslScope .() -> Unit ): Unit Calls the kite DSL with a given KiteContext .","title":"Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker0/","text":"kite-core / jp.co.cyberagent.kite.core / Invoker0 Invoker0 \u00b6 typealias Invoker0 = () -> Unit","title":" invoker0"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker0/#invoker0","text":"typealias Invoker0 = () -> Unit","title":"Invoker0"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker1/","text":"kite-core / jp.co.cyberagent.kite.core / Invoker1 Invoker1 \u00b6 typealias Invoker1<A> = ( A ) -> Unit","title":" invoker1"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker1/#invoker1","text":"typealias Invoker1<A> = ( A ) -> Unit","title":"Invoker1"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker2/","text":"kite-core / jp.co.cyberagent.kite.core / Invoker2 Invoker2 \u00b6 typealias Invoker2<A, B> = ( A , B ) -> Unit","title":" invoker2"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker2/#invoker2","text":"typealias Invoker2<A, B> = ( A , B ) -> Unit","title":"Invoker2"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker3/","text":"kite-core / jp.co.cyberagent.kite.core / Invoker3 Invoker3 \u00b6 typealias Invoker3<A, B, C> = ( A , B , C ) -> Unit","title":" invoker3"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker3/#invoker3","text":"typealias Invoker3<A, B, C> = ( A , B , C ) -> Unit","title":"Invoker3"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker4/","text":"kite-core / jp.co.cyberagent.kite.core / Invoker4 Invoker4 \u00b6 typealias Invoker4<A, B, C, D> = ( A , B , C , D ) -> Unit","title":" invoker4"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker4/#invoker4","text":"typealias Invoker4<A, B, C, D> = ( A , B , C , D ) -> Unit","title":"Invoker4"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker5/","text":"kite-core / jp.co.cyberagent.kite.core / Invoker5 Invoker5 \u00b6 typealias Invoker5<A, B, C, D, E> = ( A , B , C , D , E ) -> Unit","title":" invoker5"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker5/#invoker5","text":"typealias Invoker5<A, B, C, D, E> = ( A , B , C , D , E ) -> Unit","title":"Invoker5"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker6/","text":"kite-core / jp.co.cyberagent.kite.core / Invoker6 Invoker6 \u00b6 typealias Invoker6<A, B, C, D, E, F> = ( A , B , C , D , E , F ) -> Unit","title":" invoker6"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-invoker6/#invoker6","text":"typealias Invoker6<A, B, C, D, E, F> = ( A , B , C , D , E , F ) -> Unit","title":"Invoker6"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context-element/","text":"kite-core / jp.co.cyberagent.kite.core / KiteContextElement KiteContextElement \u00b6 typealias KiteContextElement = Pair < Any , Any >","title":" kite context element"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context-element/#kitecontextelement","text":"typealias KiteContextElement = Pair < Any , Any >","title":"KiteContextElement"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/","text":"kite-core / jp.co.cyberagent.kite.core / KiteContext KiteContext \u00b6 fun KiteContext(): KiteContext Creates an empty KiteContext .","title":" kite context"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/#kitecontext","text":"fun KiteContext(): KiteContext Creates an empty KiteContext .","title":"KiteContext"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-scope/","text":"kite-core / jp.co.cyberagent.kite.core / KiteDslScope KiteDslScope \u00b6 fun KiteDslScope(coroutineScope: CoroutineScope, kiteContext: KiteContext ): KiteDslScope Create a simple KiteDslScope from coroutineScope . A default KiteCoroutineDispatchers instance will be set into the kiteContext if absent. It\u2019s not recommend to use the method to construct a KiteDslScope and write kite DSL. Instead, you should use Fragment.kiteDsl or ComponentActivity.kiteDsl in production code. And use TestKiteDslScope or runTestKiteDsl in test code.","title":" kite dsl scope"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-scope/#kitedslscope","text":"fun KiteDslScope(coroutineScope: CoroutineScope, kiteContext: KiteContext ): KiteDslScope Create a simple KiteDslScope from coroutineScope . A default KiteCoroutineDispatchers instance will be set into the kiteContext if absent. It\u2019s not recommend to use the method to construct a KiteDslScope and write kite DSL. Instead, you should use Fragment.kiteDsl or ComponentActivity.kiteDsl in production code. And use TestKiteDslScope or runTestKiteDsl in test code.","title":"KiteDslScope"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-memo-scope/","text":"kite-core / jp.co.cyberagent.kite.core / KiteMemoScope KiteMemoScope \u00b6 interface KiteMemoScope Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":" kite memo scope"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-memo-scope/#kitememoscope","text":"interface KiteMemoScope","title":"KiteMemoScope"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-memo-scope/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple2/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple2 Tuple2 \u00b6 typealias Tuple2<A, B> = Pair < A , B >","title":" tuple2"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple2/#tuple2","text":"typealias Tuple2<A, B> = Pair < A , B >","title":"Tuple2"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/as-kite-context-element/","text":"kite-core / jp.co.cyberagent.kite.core / asKiteContextElement asKiteContextElement \u00b6 inline fun <reified T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"As kite context element"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/as-kite-context-element/#askitecontextelement","text":"inline fun <reified T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"asKiteContextElement"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/build-kite-context/","text":"kite-core / jp.co.cyberagent.kite.core / buildKiteContext buildKiteContext \u00b6 fun buildKiteContext(builderAction: MutableKiteContext .() -> Unit ): KiteContext Builds a new KiteContext by populating a MutableKiteContext using the given builderAction .","title":"Build kite context"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/build-kite-context/#buildkitecontext","text":"fun buildKiteContext(builderAction: MutableKiteContext .() -> Unit ): KiteContext Builds a new KiteContext by populating a MutableKiteContext using the given builderAction .","title":"buildKiteContext"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/check-is-main-thread/","text":"kite-core / jp.co.cyberagent.kite.core / checkIsMainThread checkIsMainThread \u00b6 fun MainThreadChecker .checkIsMainThread(name: String ): Unit Asserts current thread is main thread. If it is not, then throws IllegalStateException .","title":"Check is main thread"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/check-is-main-thread/#checkismainthread","text":"fun MainThreadChecker .checkIsMainThread(name: String ): Unit Asserts current thread is main thread. If it is not, then throws IllegalStateException .","title":"checkIsMainThread"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/default-dispatcher/","text":"kite-core / jp.co.cyberagent.kite.core / defaultDispatcher defaultDispatcher \u00b6 val KiteDslScope .defaultDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.default in current context.","title":"Default dispatcher"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/default-dispatcher/#defaultdispatcher","text":"val KiteDslScope .defaultDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.default in current context.","title":"defaultDispatcher"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/get-by-type/","text":"kite-core / jp.co.cyberagent.kite.core / getByType getByType \u00b6 inline fun <reified T : Any > KiteContext .getByType(): T ? Returns the value with its KClass as the key. If the key is not found then returns null.","title":"Get by type"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/get-by-type/#getbytype","text":"inline fun <reified T : Any > KiteContext .getByType(): T ? Returns the value with its KClass as the key. If the key is not found then returns null.","title":"getByType"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/get-value/","text":"kite-core / jp.co.cyberagent.kite.core / getValue getValue \u00b6 operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property.","title":"Get value"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/get-value/#getvalue","text":"operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property.","title":"getValue"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/io-dispatcher/","text":"kite-core / jp.co.cyberagent.kite.core / ioDispatcher ioDispatcher \u00b6 val KiteDslScope .ioDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.io in this current context.","title":"Io dispatcher"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/io-dispatcher/#iodispatcher","text":"val KiteDslScope .ioDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.io in this current context.","title":"ioDispatcher"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/kite-context-of/","text":"kite-core / jp.co.cyberagent.kite.core / kiteContextOf kiteContextOf \u00b6 fun kiteContextOf(vararg element: KiteContextElement ): KiteContext Returns a new KiteContext with the specified contents, given as a list of pairs where the first value is the key and the second is the value.","title":"Kite context of"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/kite-context-of/#kitecontextof","text":"fun kiteContextOf(vararg element: KiteContextElement ): KiteContext Returns a new KiteContext with the specified contents, given as a list of pairs where the first value is the key and the second is the value.","title":"kiteContextOf"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/main-dispatcher/","text":"kite-core / jp.co.cyberagent.kite.core / mainDispatcher mainDispatcher \u00b6 val KiteDslScope .mainDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.main in current context.","title":"Main dispatcher"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/main-dispatcher/#maindispatcher","text":"val KiteDslScope .mainDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.main in current context.","title":"mainDispatcher"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/memo/","text":"kite-core / jp.co.cyberagent.kite.core / memo memo \u00b6 fun <T> KiteDslScope .memo(computation: KiteMemoScope .() -> T ): KiteState < T > Evaluate the computation during the computation . The evaluation result will be cached into a KiteState . Usage: \u00b6 val myState = state { 0 } launch { for(i in 0..10) { delay(1000) myState.value++ } } // myMemo value will changed with 0, 2, 4, ..., 20 val myMemo = memo { myState.value * 2 }","title":"Memo"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/memo/#memo","text":"fun <T> KiteDslScope .memo(computation: KiteMemoScope .() -> T ): KiteState < T > Evaluate the computation during the computation . The evaluation result will be cached into a KiteState .","title":"memo"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/memo/#usage","text":"val myState = state { 0 } launch { for(i in 0..10) { delay(1000) myState.value++ } } // myMemo value will changed with 0, 2, 4, ..., 20 val myMemo = memo { myState.value * 2 }","title":"Usage:"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/plus-assign/","text":"kite-core / jp.co.cyberagent.kite.core / plusAssign plusAssign \u00b6 operator fun MutableKiteContext .plusAssign(element: KiteContextElement ): Unit Associates the key of element with its value. If the key already existed then throws IllegalStateException","title":"Plus assign"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/plus-assign/#plusassign","text":"operator fun MutableKiteContext .plusAssign(element: KiteContextElement ): Unit Associates the key of element with its value. If the key already existed then throws IllegalStateException","title":"plusAssign"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/require-by-type/","text":"kite-core / jp.co.cyberagent.kite.core / requireByType requireByType \u00b6 inline fun <reified T : Any > KiteContext .requireByType(): T Returns the value with its KClass as the key. If the key is not found then throws IllegalArgumentException .","title":"Require by type"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/require-by-type/#requirebytype","text":"inline fun <reified T : Any > KiteContext .requireByType(): T Returns the value with its KClass as the key. If the key is not found then throws IllegalArgumentException .","title":"requireByType"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/require/","text":"kite-core / jp.co.cyberagent.kite.core / require require \u00b6 fun <T : Any > KiteContext .require(key: Any ): T Returns the value with the given key . If the key is not found then throws IllegalArgumentException .","title":"Require"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/require/#require","text":"fun <T : Any > KiteContext .require(key: Any ): T Returns the value with the given key . If the key is not found then throws IllegalArgumentException .","title":"require"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/set-by-type/","text":"kite-core / jp.co.cyberagent.kite.core / setByType setByType \u00b6 inline fun <reified T : Any > MutableKiteContext .setByType(value: T ): Unit Associates the value with its KClass as the key. If the key already existed then throws IllegalStateException .","title":"Set by type"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/set-by-type/#setbytype","text":"inline fun <reified T : Any > MutableKiteContext .setByType(value: T ): Unit Associates the value with its KClass as the key. If the key already existed then throws IllegalStateException .","title":"setByType"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/set-value/","text":"kite-core / jp.co.cyberagent.kite.core / setValue setValue \u00b6 operator fun <T> KiteMutableState < T >.setValue(thisRef: Nothing ?, prop: KProperty <*>, value: T ): Unit Supports delegated property.","title":"Set value"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/set-value/#setvalue","text":"operator fun <T> KiteMutableState < T >.setValue(thisRef: Nothing ?, prop: KProperty <*>, value: T ): Unit Supports delegated property.","title":"setValue"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/state/","text":"kite-core / jp.co.cyberagent.kite.core / state state \u00b6 fun <T> KiteDslScope .state(initialValue: () -> T ): KiteMutableState < T > Find the KiteStateCreator in current context and use it to create a KiteState with initialValue .","title":"State"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/state/#state","text":"fun <T> KiteDslScope .state(initialValue: () -> T ): KiteMutableState < T > Find the KiteStateCreator in current context and use it to create a KiteState with initialValue .","title":"state"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/subscribe/","text":"kite-core / jp.co.cyberagent.kite.core / subscribe subscribe \u00b6 fun KiteDslScope .subscribe(action: KiteSubscribeScope .() -> Unit ): Unit Run the action during the action . Usage: \u00b6 val myState = state { 0 } launch { for(i in 0..10) { delay(1000) myState.value++ } } subscribe { // text will changed with 0, 1, 2, ..., 10 textView.text = myState.value.toString() }","title":"Subscribe"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/subscribe/#subscribe","text":"fun KiteDslScope .subscribe(action: KiteSubscribeScope .() -> Unit ): Unit Run the action during the action .","title":"subscribe"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/subscribe/#usage","text":"val myState = state { 0 } launch { for(i in 0..10) { delay(1000) myState.value++ } } subscribe { // text will changed with 0, 1, 2, ..., 10 textView.text = myState.value.toString() }","title":"Usage:"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/update/","text":"kite-core / jp.co.cyberagent.kite.core / update update \u00b6 fun <T> KiteMutableState < T >.update(f: (curr: T ) -> T ): Unit Updates the value with the result of function f has one parameter that receives current value .","title":"Update"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/update/#update","text":"fun <T> KiteMutableState < T >.update(f: (curr: T ) -> T ): Unit Updates the value with the result of function f has one parameter that receives current value .","title":"update"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/with-kite-context/","text":"kite-core / jp.co.cyberagent.kite.core / withKiteContext withKiteContext \u00b6 fun KiteDslScope .withKiteContext(context: KiteContext , block: KiteDslScope .() -> Unit ): Unit Calls the kite DSL with a given KiteContext . The resulting context for the block using the KiteContext.plus method.","title":"With kite context"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/with-kite-context/#withkitecontext","text":"fun KiteDslScope .withKiteContext(context: KiteContext , block: KiteDslScope .() -> Unit ): Unit Calls the kite DSL with a given KiteContext . The resulting context for the block using the KiteContext.plus method.","title":"withKiteContext"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/","text":"kite-core / jp.co.cyberagent.kite.core / AbstractKiteMutableState AbstractKiteMutableState \u00b6 abstract class AbstractKiteMutableState<T> : KiteMutableState < T > Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber. Constructors \u00b6 Name Summary <init> AbstractKiteMutableState() Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber. Inherited Properties \u00b6 Name Summary value abstract var value: T Functions \u00b6 Name Summary notifyChanged fun notifyChanged(): Unit subscribe fun subscribe(): Unit Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getValue operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property. setValue operator fun <T> KiteMutableState < T >.setValue(thisRef: Nothing ?, prop: KProperty <*>, value: T ): Unit Supports delegated property. update fun <T> KiteMutableState < T >.update(f: (curr: T ) -> T ): Unit Updates the value with the result of function f has one parameter that receives current value .","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/#abstractkitemutablestate","text":"abstract class AbstractKiteMutableState<T> : KiteMutableState < T > Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber.","title":"AbstractKiteMutableState"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/#constructors","text":"Name Summary <init> AbstractKiteMutableState() Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber.","title":"Constructors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/#inherited-properties","text":"Name Summary value abstract var value: T","title":"Inherited Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/#functions","text":"Name Summary notifyChanged fun notifyChanged(): Unit subscribe fun subscribe(): Unit","title":"Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getValue operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property. setValue operator fun <T> KiteMutableState < T >.setValue(thisRef: Nothing ?, prop: KProperty <*>, value: T ): Unit Supports delegated property. update fun <T> KiteMutableState < T >.update(f: (curr: T ) -> T ): Unit Updates the value with the result of function f has one parameter that receives current value .","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/-init-/","text":"kite-core / jp.co.cyberagent.kite.core / AbstractKiteMutableState / <init> <init> \u00b6 AbstractKiteMutableState() Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber.","title":" init "},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/-init-/#init","text":"AbstractKiteMutableState() Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber.","title":"&lt;init&gt;"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/notify-changed/","text":"kite-core / jp.co.cyberagent.kite.core / AbstractKiteMutableState / notifyChanged notifyChanged \u00b6 protected fun notifyChanged(): Unit","title":"Notify changed"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/notify-changed/#notifychanged","text":"protected fun notifyChanged(): Unit","title":"notifyChanged"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/subscribe/","text":"kite-core / jp.co.cyberagent.kite.core / AbstractKiteMutableState / subscribe subscribe \u00b6 protected fun subscribe(): Unit","title":"Subscribe"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-abstract-kite-mutable-state/subscribe/#subscribe","text":"protected fun subscribe(): Unit","title":"subscribe"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/","text":"kite-core / jp.co.cyberagent.kite.core / KiteContext KiteContext \u00b6 interface KiteContext Persistent context for the KiteDslScope . It behaves like a map. Properties \u00b6 Name Summary keys abstract val keys: Set < Any > Returns all keys in this context. Functions \u00b6 Name Summary get abstract operator fun <T : Any > get(key: Any ): T ? Returns the value with the given key . If the key is not found then returns null. plus open operator fun plus(kiteContext: KiteContext ): KiteContext Returns a context containing value from this context and values from other kiteContext . The elements from this context with the same key as in the other one are dropped. Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getByType fun <T : Any > KiteContext .getByType(): T ? Returns the value with its KClass as the key. If the key is not found then returns null. require fun <T : Any > KiteContext .require(key: Any ): T Returns the value with the given key . If the key is not found then throws IllegalArgumentException . requireByType fun <T : Any > KiteContext .requireByType(): T Returns the value with its KClass as the key. If the key is not found then throws IllegalArgumentException . Inheritors \u00b6 Name Summary MutableKiteContext interface MutableKiteContext : KiteContext A modifiable KiteContext .","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/#kitecontext","text":"interface KiteContext Persistent context for the KiteDslScope . It behaves like a map.","title":"KiteContext"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/#properties","text":"Name Summary keys abstract val keys: Set < Any > Returns all keys in this context.","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/#functions","text":"Name Summary get abstract operator fun <T : Any > get(key: Any ): T ? Returns the value with the given key . If the key is not found then returns null. plus open operator fun plus(kiteContext: KiteContext ): KiteContext Returns a context containing value from this context and values from other kiteContext . The elements from this context with the same key as in the other one are dropped.","title":"Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getByType fun <T : Any > KiteContext .getByType(): T ? Returns the value with its KClass as the key. If the key is not found then returns null. require fun <T : Any > KiteContext .require(key: Any ): T Returns the value with the given key . If the key is not found then throws IllegalArgumentException . requireByType fun <T : Any > KiteContext .requireByType(): T Returns the value with its KClass as the key. If the key is not found then throws IllegalArgumentException .","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/#inheritors","text":"Name Summary MutableKiteContext interface MutableKiteContext : KiteContext A modifiable KiteContext .","title":"Inheritors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/get/","text":"kite-core / jp.co.cyberagent.kite.core / KiteContext / get get \u00b6 abstract operator fun <T : Any > get(key: Any ): T ? Returns the value with the given key . If the key is not found then returns null.","title":"Get"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/get/#get","text":"abstract operator fun <T : Any > get(key: Any ): T ? Returns the value with the given key . If the key is not found then returns null.","title":"get"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/keys/","text":"kite-core / jp.co.cyberagent.kite.core / KiteContext / keys keys \u00b6 abstract val keys: Set < Any > Returns all keys in this context.","title":"Keys"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/keys/#keys","text":"abstract val keys: Set < Any > Returns all keys in this context.","title":"keys"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/plus/","text":"kite-core / jp.co.cyberagent.kite.core / KiteContext / plus plus \u00b6 open operator fun plus(kiteContext: KiteContext ): KiteContext Returns a context containing value from this context and values from other kiteContext . The elements from this context with the same key as in the other one are dropped.","title":"Plus"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-context/plus/#plus","text":"open operator fun plus(kiteContext: KiteContext ): KiteContext Returns a context containing value from this context and values from other kiteContext . The elements from this context with the same key as in the other one are dropped.","title":"plus"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/","text":"kite-core / jp.co.cyberagent.kite.core / KiteCoroutineDispatchers KiteCoroutineDispatchers \u00b6 class KiteCoroutineDispatchers A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher . Constructors \u00b6 Name Summary <init> KiteCoroutineDispatchers(default: CoroutineDispatcher = Dispatchers.Default, main: CoroutineDispatcher = Dispatchers.Main, io: CoroutineDispatcher = Dispatchers.IO) A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher . Properties \u00b6 Name Summary default val default: CoroutineDispatcher io val io: CoroutineDispatcher main val main: CoroutineDispatcher Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/#kitecoroutinedispatchers","text":"class KiteCoroutineDispatchers A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher .","title":"KiteCoroutineDispatchers"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/#constructors","text":"Name Summary <init> KiteCoroutineDispatchers(default: CoroutineDispatcher = Dispatchers.Default, main: CoroutineDispatcher = Dispatchers.Main, io: CoroutineDispatcher = Dispatchers.IO) A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher .","title":"Constructors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/#properties","text":"Name Summary default val default: CoroutineDispatcher io val io: CoroutineDispatcher main val main: CoroutineDispatcher","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/-init-/","text":"kite-core / jp.co.cyberagent.kite.core / KiteCoroutineDispatchers / <init> <init> \u00b6 KiteCoroutineDispatchers(default: CoroutineDispatcher = Dispatchers.Default, main: CoroutineDispatcher = Dispatchers.Main, io: CoroutineDispatcher = Dispatchers.IO) A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher .","title":" init "},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/-init-/#init","text":"KiteCoroutineDispatchers(default: CoroutineDispatcher = Dispatchers.Default, main: CoroutineDispatcher = Dispatchers.Main, io: CoroutineDispatcher = Dispatchers.IO) A set of CoroutineDispatcher and will be set into the KiteContext . This allows the coroutine to become testable with providing testable CoroutineDispatcher .","title":"&lt;init&gt;"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/default/","text":"kite-core / jp.co.cyberagent.kite.core / KiteCoroutineDispatchers / default default \u00b6 val default: CoroutineDispatcher","title":"Default"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/default/#default","text":"val default: CoroutineDispatcher","title":"default"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/io/","text":"kite-core / jp.co.cyberagent.kite.core / KiteCoroutineDispatchers / io io \u00b6 val io: CoroutineDispatcher","title":"Io"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/io/#io","text":"val io: CoroutineDispatcher","title":"io"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/main/","text":"kite-core / jp.co.cyberagent.kite.core / KiteCoroutineDispatchers / main main \u00b6 val main: CoroutineDispatcher","title":"Main"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-coroutine-dispatchers/main/#main","text":"val main: CoroutineDispatcher","title":"main"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-maker/","text":"kite-core / jp.co.cyberagent.kite.core / KiteDslMaker KiteDslMaker \u00b6 @DslMarker annotation class KiteDslMaker Constructors \u00b6 Name Summary <init> KiteDslMaker() Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-maker/#kitedslmaker","text":"@DslMarker annotation class KiteDslMaker","title":"KiteDslMaker"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-maker/#constructors","text":"Name Summary <init> KiteDslMaker()","title":"Constructors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-maker/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-maker/-init-/","text":"kite-core / jp.co.cyberagent.kite.core / KiteDslMaker / <init> <init> \u00b6 KiteDslMaker()","title":" init "},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-maker/-init-/#init","text":"KiteDslMaker()","title":"&lt;init&gt;"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-scope/","text":"kite-core / jp.co.cyberagent.kite.core / KiteDslScope KiteDslScope \u00b6 interface KiteDslScope : CoroutineScope Define a scope for kite DSL. All kite DSL (like state , memo , etc) is an extension on KiteDslScope . KiteDslScope implements CoroutineScope so you can start coroutine via launch , and async . Properties \u00b6 Name Summary kiteContext abstract val kiteContext: KiteContext The KiteContext of this scope. Extension Properties \u00b6 Name Summary defaultDispatcher val KiteDslScope .defaultDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.default in current context. ioDispatcher val KiteDslScope .ioDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.io in this current context. mainDispatcher val KiteDslScope .mainDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.main in current context. Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass memo fun <T> KiteDslScope .memo(computation: KiteMemoScope .() -> T ): KiteState < T > Evaluate the computation during the computation . The evaluation result will be cached into a KiteState . state fun <T> KiteDslScope .state(initialValue: () -> T ): KiteMutableState < T > Find the KiteStateCreator in current context and use it to create a KiteState with initialValue . subscribe fun KiteDslScope .subscribe(action: KiteSubscribeScope .() -> Unit ): Unit Run the action during the action . withKiteContext fun KiteDslScope .withKiteContext(context: KiteContext , block: KiteDslScope .() -> Unit ): Unit Calls the kite DSL with a given KiteContext .","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-scope/#kitedslscope","text":"interface KiteDslScope : CoroutineScope Define a scope for kite DSL. All kite DSL (like state , memo , etc) is an extension on KiteDslScope . KiteDslScope implements CoroutineScope so you can start coroutine via launch , and async .","title":"KiteDslScope"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-scope/#properties","text":"Name Summary kiteContext abstract val kiteContext: KiteContext The KiteContext of this scope.","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-scope/#extension-properties","text":"Name Summary defaultDispatcher val KiteDslScope .defaultDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.default in current context. ioDispatcher val KiteDslScope .ioDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.io in this current context. mainDispatcher val KiteDslScope .mainDispatcher: CoroutineDispatcher Returns the KiteCoroutineDispatchers.main in current context.","title":"Extension Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-scope/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass memo fun <T> KiteDslScope .memo(computation: KiteMemoScope .() -> T ): KiteState < T > Evaluate the computation during the computation . The evaluation result will be cached into a KiteState . state fun <T> KiteDslScope .state(initialValue: () -> T ): KiteMutableState < T > Find the KiteStateCreator in current context and use it to create a KiteState with initialValue . subscribe fun KiteDslScope .subscribe(action: KiteSubscribeScope .() -> Unit ): Unit Run the action during the action . withKiteContext fun KiteDslScope .withKiteContext(context: KiteContext , block: KiteDslScope .() -> Unit ): Unit Calls the kite DSL with a given KiteContext .","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-scope/kite-context/","text":"kite-core / jp.co.cyberagent.kite.core / KiteDslScope / kiteContext kiteContext \u00b6 abstract val kiteContext: KiteContext The KiteContext of this scope.","title":"Kite context"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-dsl-scope/kite-context/#kitecontext","text":"abstract val kiteContext: KiteContext The KiteContext of this scope.","title":"kiteContext"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-mutable-state/","text":"kite-core / jp.co.cyberagent.kite.core / KiteMutableState KiteMutableState \u00b6 interface KiteMutableState<T> : KiteState < T > Represents a mutable KiteState that provided a setter for value . Do not implemented this interface directly, instead inherits the abstract class AbstractKiteMutableState . Properties \u00b6 Name Summary value abstract var value: T Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getValue operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property. setValue operator fun <T> KiteMutableState < T >.setValue(thisRef: Nothing ?, prop: KProperty <*>, value: T ): Unit Supports delegated property. update fun <T> KiteMutableState < T >.update(f: (curr: T ) -> T ): Unit Updates the value with the result of function f has one parameter that receives current value . Inheritors \u00b6 Name Summary AbstractKiteMutableState abstract class AbstractKiteMutableState<T> : KiteMutableState < T > Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber.","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-mutable-state/#kitemutablestate","text":"interface KiteMutableState<T> : KiteState < T > Represents a mutable KiteState that provided a setter for value . Do not implemented this interface directly, instead inherits the abstract class AbstractKiteMutableState .","title":"KiteMutableState"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-mutable-state/#properties","text":"Name Summary value abstract var value: T","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-mutable-state/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getValue operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property. setValue operator fun <T> KiteMutableState < T >.setValue(thisRef: Nothing ?, prop: KProperty <*>, value: T ): Unit Supports delegated property. update fun <T> KiteMutableState < T >.update(f: (curr: T ) -> T ): Unit Updates the value with the result of function f has one parameter that receives current value .","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-mutable-state/#inheritors","text":"Name Summary AbstractKiteMutableState abstract class AbstractKiteMutableState<T> : KiteMutableState < T > Inherits this abstract class to create custom KiteMutableState . When KiteMutableState.value changed, calls notifyChanged to notify its subscriber. When access the getter of KiteMutableState.value , calls subscribe to add itself as the dependency to any potential subscriber.","title":"Inheritors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-mutable-state/value/","text":"kite-core / jp.co.cyberagent.kite.core / KiteMutableState / value value \u00b6 abstract var value: T Overrides KiteState.value","title":"Value"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-mutable-state/value/#value","text":"abstract var value: T Overrides KiteState.value","title":"value"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state/","text":"kite-core / jp.co.cyberagent.kite.core / KiteState KiteState \u00b6 interface KiteState<out T> Represents a read-only state with single updatable value . Properties \u00b6 Name Summary value abstract val value: T Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getValue operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property. Inheritors \u00b6 Name Summary KiteMutableState interface KiteMutableState<T> : KiteState < T > Represents a mutable KiteState that provided a setter for value . Do not implemented this interface directly, instead inherits the abstract class AbstractKiteMutableState .","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state/#kitestate","text":"interface KiteState<out T> Represents a read-only state with single updatable value .","title":"KiteState"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state/#properties","text":"Name Summary value abstract val value: T","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getValue operator fun <T> KiteState < T >.getValue(thisRef: Nothing ?, prop: KProperty <*>): T Supports delegated property.","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state/#inheritors","text":"Name Summary KiteMutableState interface KiteMutableState<T> : KiteState < T > Represents a mutable KiteState that provided a setter for value . Do not implemented this interface directly, instead inherits the abstract class AbstractKiteMutableState .","title":"Inheritors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state/value/","text":"kite-core / jp.co.cyberagent.kite.core / KiteState / value value \u00b6 abstract val value: T","title":"Value"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state/value/#value","text":"abstract val value: T","title":"value"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state-creator/","text":"kite-core / jp.co.cyberagent.kite.core / KiteStateCreator KiteStateCreator \u00b6 interface KiteStateCreator Defines how to create KiteMutableState . Functions \u00b6 Name Summary create abstract fun <T> create(initialValue: () -> T ): KiteMutableState < T > Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state-creator/#kitestatecreator","text":"interface KiteStateCreator Defines how to create KiteMutableState .","title":"KiteStateCreator"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state-creator/#functions","text":"Name Summary create abstract fun <T> create(initialValue: () -> T ): KiteMutableState < T >","title":"Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state-creator/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state-creator/create/","text":"kite-core / jp.co.cyberagent.kite.core / KiteStateCreator / create create \u00b6 abstract fun <T> create(initialValue: () -> T ): KiteMutableState < T >","title":"Create"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-state-creator/create/#create","text":"abstract fun <T> create(initialValue: () -> T ): KiteMutableState < T >","title":"create"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-subscribe-scope/","text":"kite-core / jp.co.cyberagent.kite.core / KiteSubscribeScope KiteSubscribeScope \u00b6 interface KiteSubscribeScope Define a scope for subscribing a action to the change of some KiteState s automatically. Functions \u00b6 Name Summary refOnly abstract fun <T> refOnly(block: KiteSubscribeScope .() -> T ): T Any state referenced in the block will not be treated as a dependency. Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-subscribe-scope/#kitesubscribescope","text":"interface KiteSubscribeScope Define a scope for subscribing a action to the change of some KiteState s automatically.","title":"KiteSubscribeScope"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-subscribe-scope/#functions","text":"Name Summary refOnly abstract fun <T> refOnly(block: KiteSubscribeScope .() -> T ): T Any state referenced in the block will not be treated as a dependency.","title":"Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-subscribe-scope/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-subscribe-scope/ref-only/","text":"kite-core / jp.co.cyberagent.kite.core / KiteSubscribeScope / refOnly refOnly \u00b6 abstract fun <T> refOnly(block: KiteSubscribeScope .() -> T ): T Any state referenced in the block will not be treated as a dependency.","title":"Ref only"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-kite-subscribe-scope/ref-only/#refonly","text":"abstract fun <T> refOnly(block: KiteSubscribeScope .() -> T ): T Any state referenced in the block will not be treated as a dependency.","title":"refOnly"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-main-thread-checker/","text":"kite-core / jp.co.cyberagent.kite.core / MainThreadChecker MainThreadChecker \u00b6 interface MainThreadChecker A helper interface to determine current thread is main thread or not. Properties \u00b6 Name Summary isMainThread abstract val isMainThread: Boolean Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass checkIsMainThread fun MainThreadChecker .checkIsMainThread(name: String ): Unit Asserts current thread is main thread. If it is not, then throws IllegalStateException .","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-main-thread-checker/#mainthreadchecker","text":"interface MainThreadChecker A helper interface to determine current thread is main thread or not.","title":"MainThreadChecker"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-main-thread-checker/#properties","text":"Name Summary isMainThread abstract val isMainThread: Boolean","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-main-thread-checker/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass checkIsMainThread fun MainThreadChecker .checkIsMainThread(name: String ): Unit Asserts current thread is main thread. If it is not, then throws IllegalStateException .","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-main-thread-checker/is-main-thread/","text":"kite-core / jp.co.cyberagent.kite.core / MainThreadChecker / isMainThread isMainThread \u00b6 abstract val isMainThread: Boolean","title":"Is main thread"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-main-thread-checker/is-main-thread/#ismainthread","text":"abstract val isMainThread: Boolean","title":"isMainThread"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-mutable-kite-context/","text":"kite-core / jp.co.cyberagent.kite.core / MutableKiteContext MutableKiteContext \u00b6 interface MutableKiteContext : KiteContext A modifiable KiteContext . Inherited Properties \u00b6 Name Summary keys abstract val keys: Set < Any > Returns all keys in this context. Functions \u00b6 Name Summary set abstract operator fun <T : Any > set(key: Any , value: T ): Unit Associates the value . If the key already existed then throws IllegalStateException . Inherited Functions \u00b6 Name Summary get abstract operator fun <T : Any > get(key: Any ): T ? Returns the value with the given key . If the key is not found then returns null. plus open operator fun plus(kiteContext: KiteContext ): KiteContext Returns a context containing value from this context and values from other kiteContext . The elements from this context with the same key as in the other one are dropped. Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getByType fun <T : Any > KiteContext .getByType(): T ? Returns the value with its KClass as the key. If the key is not found then returns null. plusAssign operator fun MutableKiteContext .plusAssign(element: KiteContextElement ): Unit Associates the key of element with its value. If the key already existed then throws IllegalStateException require fun <T : Any > KiteContext .require(key: Any ): T Returns the value with the given key . If the key is not found then throws IllegalArgumentException . requireByType fun <T : Any > KiteContext .requireByType(): T Returns the value with its KClass as the key. If the key is not found then throws IllegalArgumentException . setByType fun <T : Any > MutableKiteContext .setByType(value: T ): Unit Associates the value with its KClass as the key. If the key already existed then throws IllegalStateException .","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-mutable-kite-context/#mutablekitecontext","text":"interface MutableKiteContext : KiteContext A modifiable KiteContext .","title":"MutableKiteContext"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-mutable-kite-context/#inherited-properties","text":"Name Summary keys abstract val keys: Set < Any > Returns all keys in this context.","title":"Inherited Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-mutable-kite-context/#functions","text":"Name Summary set abstract operator fun <T : Any > set(key: Any , value: T ): Unit Associates the value . If the key already existed then throws IllegalStateException .","title":"Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-mutable-kite-context/#inherited-functions","text":"Name Summary get abstract operator fun <T : Any > get(key: Any ): T ? Returns the value with the given key . If the key is not found then returns null. plus open operator fun plus(kiteContext: KiteContext ): KiteContext Returns a context containing value from this context and values from other kiteContext . The elements from this context with the same key as in the other one are dropped.","title":"Inherited Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-mutable-kite-context/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass getByType fun <T : Any > KiteContext .getByType(): T ? Returns the value with its KClass as the key. If the key is not found then returns null. plusAssign operator fun MutableKiteContext .plusAssign(element: KiteContextElement ): Unit Associates the key of element with its value. If the key already existed then throws IllegalStateException require fun <T : Any > KiteContext .require(key: Any ): T Returns the value with the given key . If the key is not found then throws IllegalArgumentException . requireByType fun <T : Any > KiteContext .requireByType(): T Returns the value with its KClass as the key. If the key is not found then throws IllegalArgumentException . setByType fun <T : Any > MutableKiteContext .setByType(value: T ): Unit Associates the value with its KClass as the key. If the key already existed then throws IllegalStateException .","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-mutable-kite-context/set/","text":"kite-core / jp.co.cyberagent.kite.core / MutableKiteContext / set set \u00b6 abstract operator fun <T : Any > set(key: Any , value: T ): Unit Associates the value . If the key already existed then throws IllegalStateException .","title":"Set"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-mutable-kite-context/set/#set","text":"abstract operator fun <T : Any > set(key: Any , value: T ): Unit Associates the value . If the key already existed then throws IllegalStateException .","title":"set"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple3 Tuple3 \u00b6 data class Tuple3<out A, out B, out C> Constructors \u00b6 Name Summary <init> Tuple3(a: A , b: B , c: C ) Properties \u00b6 Name Summary a val a: A b val b: B c val c: C Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/#tuple3","text":"data class Tuple3<out A, out B, out C>","title":"Tuple3"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/#constructors","text":"Name Summary <init> Tuple3(a: A , b: B , c: C )","title":"Constructors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/#properties","text":"Name Summary a val a: A b val b: B c val c: C","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/-init-/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple3 / <init> <init> \u00b6 Tuple3(a: A , b: B , c: C )","title":" init "},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/-init-/#init","text":"Tuple3(a: A , b: B , c: C )","title":"&lt;init&gt;"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/a/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple3 / a a \u00b6 val a: A","title":"A"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/a/#a","text":"val a: A","title":"a"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/b/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple3 / b b \u00b6 val b: B","title":"B"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/b/#b","text":"val b: B","title":"b"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/c/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple3 / c c \u00b6 val c: C","title":"C"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple3/c/#c","text":"val c: C","title":"c"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple4 Tuple4 \u00b6 data class Tuple4<out A, out B, out C, out D> Constructors \u00b6 Name Summary <init> Tuple4(a: A , b: B , c: C , d: D ) Properties \u00b6 Name Summary a val a: A b val b: B c val c: C d val d: D Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/#tuple4","text":"data class Tuple4<out A, out B, out C, out D>","title":"Tuple4"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/#constructors","text":"Name Summary <init> Tuple4(a: A , b: B , c: C , d: D )","title":"Constructors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/#properties","text":"Name Summary a val a: A b val b: B c val c: C d val d: D","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/-init-/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple4 / <init> <init> \u00b6 Tuple4(a: A , b: B , c: C , d: D )","title":" init "},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/-init-/#init","text":"Tuple4(a: A , b: B , c: C , d: D )","title":"&lt;init&gt;"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/a/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple4 / a a \u00b6 val a: A","title":"A"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/a/#a","text":"val a: A","title":"a"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/b/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple4 / b b \u00b6 val b: B","title":"B"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/b/#b","text":"val b: B","title":"b"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/c/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple4 / c c \u00b6 val c: C","title":"C"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/c/#c","text":"val c: C","title":"c"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/d/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple4 / d d \u00b6 val d: D","title":"D"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple4/d/#d","text":"val d: D","title":"d"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple5 Tuple5 \u00b6 data class Tuple5<out A, out B, out C, out D, out E> Constructors \u00b6 Name Summary <init> Tuple5(a: A , b: B , c: C , d: D , e: E ) Properties \u00b6 Name Summary a val a: A b val b: B c val c: C d val d: D e val e: E Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/#tuple5","text":"data class Tuple5<out A, out B, out C, out D, out E>","title":"Tuple5"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/#constructors","text":"Name Summary <init> Tuple5(a: A , b: B , c: C , d: D , e: E )","title":"Constructors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/#properties","text":"Name Summary a val a: A b val b: B c val c: C d val d: D e val e: E","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/-init-/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple5 / <init> <init> \u00b6 Tuple5(a: A , b: B , c: C , d: D , e: E )","title":" init "},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/-init-/#init","text":"Tuple5(a: A , b: B , c: C , d: D , e: E )","title":"&lt;init&gt;"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/a/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple5 / a a \u00b6 val a: A","title":"A"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/a/#a","text":"val a: A","title":"a"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/b/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple5 / b b \u00b6 val b: B","title":"B"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/b/#b","text":"val b: B","title":"b"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/c/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple5 / c c \u00b6 val c: C","title":"C"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/c/#c","text":"val c: C","title":"c"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/d/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple5 / d d \u00b6 val d: D","title":"D"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/d/#d","text":"val d: D","title":"d"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/e/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple5 / e e \u00b6 val e: E","title":"E"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple5/e/#e","text":"val e: E","title":"e"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple6 Tuple6 \u00b6 data class Tuple6<out A, out B, out C, out D, out E, out F> Constructors \u00b6 Name Summary <init> Tuple6(a: A , b: B , c: C , d: D , e: E , f: F ) Properties \u00b6 Name Summary a val a: A b val b: B c val c: C d val d: D e val e: E f val f: F Extension Functions \u00b6 Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Index"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/#tuple6","text":"data class Tuple6<out A, out B, out C, out D, out E, out F>","title":"Tuple6"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/#constructors","text":"Name Summary <init> Tuple6(a: A , b: B , c: C , d: D , e: E , f: F )","title":"Constructors"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/#properties","text":"Name Summary a val a: A b val b: B c val c: C d val d: D e val e: E f val f: F","title":"Properties"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/#extension-functions","text":"Name Summary asKiteContextElement fun <T : Any > T .asKiteContextElement(): Pair < KClass <*>, Any > Creates a KiteContextElement with the KClass","title":"Extension Functions"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/-init-/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple6 / <init> <init> \u00b6 Tuple6(a: A , b: B , c: C , d: D , e: E , f: F )","title":" init "},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/-init-/#init","text":"Tuple6(a: A , b: B , c: C , d: D , e: E , f: F )","title":"&lt;init&gt;"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/a/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple6 / a a \u00b6 val a: A","title":"A"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/a/#a","text":"val a: A","title":"a"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/b/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple6 / b b \u00b6 val b: B","title":"B"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/b/#b","text":"val b: B","title":"b"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/c/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple6 / c c \u00b6 val c: C","title":"C"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/c/#c","text":"val c: C","title":"c"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/d/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple6 / d d \u00b6 val d: D","title":"D"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/d/#d","text":"val d: D","title":"d"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/e/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple6 / e e \u00b6 val e: E","title":"E"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/e/#e","text":"val e: E","title":"e"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/f/","text":"kite-core / jp.co.cyberagent.kite.core / Tuple6 / f f \u00b6 val f: F","title":"F"},{"location":"api/kite-core/jp.co.cyberagent.kite.core/-tuple6/f/#f","text":"val f: F","title":"f"},{"location":"api/kite-runtime/","text":"kite-runtime Packages \u00b6 Name Summary jp.co.cyberagent.kite.runtime Index \u00b6 All Types","title":"kite-runtime"},{"location":"api/kite-runtime/#packages","text":"Name Summary jp.co.cyberagent.kite.runtime","title":"Packages"},{"location":"api/kite-runtime/#index","text":"All Types","title":"Index"},{"location":"api/kite-runtime/alltypes/","text":"All Types \u00b6 Name Summary androidx.activity.ComponentActivity (extensions in package jp.co.cyberagent.kite.runtime) androidx.fragment.app.Fragment (extensions in package jp.co.cyberagent.kite.runtime) jp.co.cyberagent.kite.core.KiteDslScope (extensions in package jp.co.cyberagent.kite.runtime) jp.co.cyberagent.kite.runtime.KiteScopeModelStoreOwner A scope that owns KiteScopeModel .","title":"Index"},{"location":"api/kite-runtime/alltypes/#all-types","text":"Name Summary androidx.activity.ComponentActivity (extensions in package jp.co.cyberagent.kite.runtime) androidx.fragment.app.Fragment (extensions in package jp.co.cyberagent.kite.runtime) jp.co.cyberagent.kite.core.KiteDslScope (extensions in package jp.co.cyberagent.kite.runtime) jp.co.cyberagent.kite.runtime.KiteScopeModelStoreOwner A scope that owns KiteScopeModel .","title":"All Types"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/","text":"kite-runtime / jp.co.cyberagent.kite.runtime Package jp.co.cyberagent.kite.runtime \u00b6 Type Aliases \u00b6 Name Summary KiteScopeModelStoreOwner typealias KiteScopeModelStoreOwner = ViewModelStoreOwner A scope that owns KiteScopeModel . Extensions for External Classes \u00b6 Name Summary androidx.activity.ComponentActivity androidx.fragment.app.Fragment jp.co.cyberagent.kite.core.KiteDslScope","title":"Index"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/#package-jpcocyberagentkiteruntime","text":"","title":"Package jp.co.cyberagent.kite.runtime"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/#type-aliases","text":"Name Summary KiteScopeModelStoreOwner typealias KiteScopeModelStoreOwner = ViewModelStoreOwner A scope that owns KiteScopeModel .","title":"Type Aliases"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/#extensions-for-external-classes","text":"Name Summary androidx.activity.ComponentActivity androidx.fragment.app.Fragment jp.co.cyberagent.kite.core.KiteDslScope","title":"Extensions for External Classes"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/-kite-scope-model-store-owner/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / KiteScopeModelStoreOwner KiteScopeModelStoreOwner \u00b6 typealias KiteScopeModelStoreOwner = ViewModelStoreOwner A scope that owns KiteScopeModel .","title":" kite scope model store owner"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/-kite-scope-model-store-owner/#kitescopemodelstoreowner","text":"typealias KiteScopeModelStoreOwner = ViewModelStoreOwner A scope that owns KiteScopeModel .","title":"KiteScopeModelStoreOwner"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.activity.-component-activity/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / androidx.activity.ComponentActivity Extensions for androidx.activity.ComponentActivity \u00b6 Name Summary kiteDsl fun ComponentActivity.kiteDsl(kiteContext: KiteContext = KiteContext(), block: KiteDslScope.() -> Unit ): Unit Creates a KiteDslScope and calls the specified kite DSL block with this scope. Can only invoke this function inside Activity.onCreate , otherwise IllegalStateException will be thrown.","title":"Index"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.activity.-component-activity/#extensions-for-androidxactivitycomponentactivity","text":"Name Summary kiteDsl fun ComponentActivity.kiteDsl(kiteContext: KiteContext = KiteContext(), block: KiteDslScope.() -> Unit ): Unit Creates a KiteDslScope and calls the specified kite DSL block with this scope. Can only invoke this function inside Activity.onCreate , otherwise IllegalStateException will be thrown.","title":"Extensions for androidx.activity.ComponentActivity"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.activity.-component-activity/kite-dsl/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / androidx.activity.ComponentActivity / kiteDsl kiteDsl \u00b6 fun ComponentActivity.kiteDsl(kiteContext: KiteContext = KiteContext(), block: KiteDslScope.() -> Unit ): Unit Creates a KiteDslScope and calls the specified kite DSL block with this scope. Can only invoke this function inside Activity.onCreate , otherwise IllegalStateException will be thrown. Several element will be set into the KiteContext of this scope: Context Activity LifecycleOwner SaveStateHandle These elements can be retrieved via their type as the key. Parameters \u00b6 kiteContext - additional to context of the the scope. block - the DSL that will be invoked in the scope.","title":"Kite dsl"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.activity.-component-activity/kite-dsl/#kitedsl","text":"fun ComponentActivity.kiteDsl(kiteContext: KiteContext = KiteContext(), block: KiteDslScope.() -> Unit ): Unit Creates a KiteDslScope and calls the specified kite DSL block with this scope. Can only invoke this function inside Activity.onCreate , otherwise IllegalStateException will be thrown. Several element will be set into the KiteContext of this scope: Context Activity LifecycleOwner SaveStateHandle These elements can be retrieved via their type as the key.","title":"kiteDsl"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.activity.-component-activity/kite-dsl/#parameters","text":"kiteContext - additional to context of the the scope. block - the DSL that will be invoked in the scope.","title":"Parameters"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.fragment.app.-fragment/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / androidx.fragment.app.Fragment Extensions for androidx.fragment.app.Fragment \u00b6 Name Summary kiteDsl fun Fragment.kiteDsl(scopeModelStoreOwner: KiteScopeModelStoreOwner = this, kiteContext: KiteContext = KiteContext(), block: KiteDslScope.() -> Unit ): Unit Creates a KiteDslScope and calls the specified kite DSL block with this scope. Can only invoke this function inside Fragment.onViewCreated , otherwise IllegalStateException will be thrown.","title":"Index"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.fragment.app.-fragment/#extensions-for-androidxfragmentappfragment","text":"Name Summary kiteDsl fun Fragment.kiteDsl(scopeModelStoreOwner: KiteScopeModelStoreOwner = this, kiteContext: KiteContext = KiteContext(), block: KiteDslScope.() -> Unit ): Unit Creates a KiteDslScope and calls the specified kite DSL block with this scope. Can only invoke this function inside Fragment.onViewCreated , otherwise IllegalStateException will be thrown.","title":"Extensions for androidx.fragment.app.Fragment"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.fragment.app.-fragment/kite-dsl/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / androidx.fragment.app.Fragment / kiteDsl kiteDsl \u00b6 fun Fragment.kiteDsl(scopeModelStoreOwner: KiteScopeModelStoreOwner = this, kiteContext: KiteContext = KiteContext(), block: KiteDslScope.() -> Unit ): Unit Creates a KiteDslScope and calls the specified kite DSL block with this scope. Can only invoke this function inside Fragment.onViewCreated , otherwise IllegalStateException will be thrown. Several element will be set into the KiteContext of the scope: Context Fragment Activity LifecycleOwner SaveStateHandle These elements can be retrieved via their type as the key. Parameters \u00b6 scopeModelStoreOwner - the scope of the KiteScopeModel . The default value if the fragment itself. kiteContext - additional to context of the the scope. block - the DSL that will be invoked in the scope.","title":"Kite dsl"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.fragment.app.-fragment/kite-dsl/#kitedsl","text":"fun Fragment.kiteDsl(scopeModelStoreOwner: KiteScopeModelStoreOwner = this, kiteContext: KiteContext = KiteContext(), block: KiteDslScope.() -> Unit ): Unit Creates a KiteDslScope and calls the specified kite DSL block with this scope. Can only invoke this function inside Fragment.onViewCreated , otherwise IllegalStateException will be thrown. Several element will be set into the KiteContext of the scope: Context Fragment Activity LifecycleOwner SaveStateHandle These elements can be retrieved via their type as the key.","title":"kiteDsl"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/androidx.fragment.app.-fragment/kite-dsl/#parameters","text":"scopeModelStoreOwner - the scope of the KiteScopeModel . The default value if the fragment itself. kiteContext - additional to context of the the scope. block - the DSL that will be invoked in the scope.","title":"Parameters"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / jp.co.cyberagent.kite.core.KiteDslScope Extensions for jp.co.cyberagent.kite.core.KiteDslScope \u00b6 Name Summary currentState val KiteDslScope.currentState: State Returns the current Lifecycle.State . onCreate fun KiteDslScope.onCreate(onCreate: () -> Unit ): Unit Executes the action onCreate when receives the lifecycle event Lifecycle.Event.ON_CREATE . onDestroy fun KiteDslScope.onDestroy(onDestroy: () -> Unit ): Unit Executes the action onDestroy when receives the lifecycle event Lifecycle.Event.ON_DESTROY . onLifecycleEvent fun KiteDslScope.onLifecycleEvent(onCreate: () -> Unit = {}, onStart: () -> Unit = {}, onResume: () -> Unit = {}, onPause: () -> Unit = {}, onStop: () -> Unit = {}, onDestroy: () -> Unit = {}): Unit Executes the specific action when receives the corresponded lifecycle event. onPause fun KiteDslScope.onPause(onPause: () -> Unit ): Unit Executes the action onPause when receives the lifecycle event Lifecycle.Event.ON_PAUSE . onResume fun KiteDslScope.onResume(onResume: () -> Unit ): Unit Executes the action onResume when receives the lifecycle event Lifecycle.Event.ON_RESUME . onStart fun KiteDslScope.onStart(onStart: () -> Unit ): Unit Executes the action onStart when receives the lifecycle event Lifecycle.Event.ON_START . onStop fun KiteDslScope.onStop(onStop: () -> Unit ): Unit Executes the action onStop when receives the lifecycle event Lifecycle.Event.ON_STOP .","title":"Index"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/#extensions-for-jpcocyberagentkitecorekitedslscope","text":"Name Summary currentState val KiteDslScope.currentState: State Returns the current Lifecycle.State . onCreate fun KiteDslScope.onCreate(onCreate: () -> Unit ): Unit Executes the action onCreate when receives the lifecycle event Lifecycle.Event.ON_CREATE . onDestroy fun KiteDslScope.onDestroy(onDestroy: () -> Unit ): Unit Executes the action onDestroy when receives the lifecycle event Lifecycle.Event.ON_DESTROY . onLifecycleEvent fun KiteDslScope.onLifecycleEvent(onCreate: () -> Unit = {}, onStart: () -> Unit = {}, onResume: () -> Unit = {}, onPause: () -> Unit = {}, onStop: () -> Unit = {}, onDestroy: () -> Unit = {}): Unit Executes the specific action when receives the corresponded lifecycle event. onPause fun KiteDslScope.onPause(onPause: () -> Unit ): Unit Executes the action onPause when receives the lifecycle event Lifecycle.Event.ON_PAUSE . onResume fun KiteDslScope.onResume(onResume: () -> Unit ): Unit Executes the action onResume when receives the lifecycle event Lifecycle.Event.ON_RESUME . onStart fun KiteDslScope.onStart(onStart: () -> Unit ): Unit Executes the action onStart when receives the lifecycle event Lifecycle.Event.ON_START . onStop fun KiteDslScope.onStop(onStop: () -> Unit ): Unit Executes the action onStop when receives the lifecycle event Lifecycle.Event.ON_STOP .","title":"Extensions for jp.co.cyberagent.kite.core.KiteDslScope"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/current-state/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / jp.co.cyberagent.kite.core.KiteDslScope / currentState currentState \u00b6 val KiteDslScope.currentState: State Returns the current Lifecycle.State .","title":"Current state"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/current-state/#currentstate","text":"val KiteDslScope.currentState: State Returns the current Lifecycle.State .","title":"currentState"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-create/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / jp.co.cyberagent.kite.core.KiteDslScope / onCreate onCreate \u00b6 inline fun KiteDslScope.onCreate(crossinline onCreate: () -> Unit ): Unit Executes the action onCreate when receives the lifecycle event Lifecycle.Event.ON_CREATE .","title":"On create"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-create/#oncreate","text":"inline fun KiteDslScope.onCreate(crossinline onCreate: () -> Unit ): Unit Executes the action onCreate when receives the lifecycle event Lifecycle.Event.ON_CREATE .","title":"onCreate"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-destroy/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / jp.co.cyberagent.kite.core.KiteDslScope / onDestroy onDestroy \u00b6 inline fun KiteDslScope.onDestroy(crossinline onDestroy: () -> Unit ): Unit Executes the action onDestroy when receives the lifecycle event Lifecycle.Event.ON_DESTROY .","title":"On destroy"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-destroy/#ondestroy","text":"inline fun KiteDslScope.onDestroy(crossinline onDestroy: () -> Unit ): Unit Executes the action onDestroy when receives the lifecycle event Lifecycle.Event.ON_DESTROY .","title":"onDestroy"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-lifecycle-event/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / jp.co.cyberagent.kite.core.KiteDslScope / onLifecycleEvent onLifecycleEvent \u00b6 inline fun KiteDslScope.onLifecycleEvent(crossinline onCreate: () -> Unit = {}, crossinline onStart: () -> Unit = {}, crossinline onResume: () -> Unit = {}, crossinline onPause: () -> Unit = {}, crossinline onStop: () -> Unit = {}, crossinline onDestroy: () -> Unit = {}): Unit Executes the specific action when receives the corresponded lifecycle event.","title":"On lifecycle event"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-lifecycle-event/#onlifecycleevent","text":"inline fun KiteDslScope.onLifecycleEvent(crossinline onCreate: () -> Unit = {}, crossinline onStart: () -> Unit = {}, crossinline onResume: () -> Unit = {}, crossinline onPause: () -> Unit = {}, crossinline onStop: () -> Unit = {}, crossinline onDestroy: () -> Unit = {}): Unit Executes the specific action when receives the corresponded lifecycle event.","title":"onLifecycleEvent"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-pause/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / jp.co.cyberagent.kite.core.KiteDslScope / onPause onPause \u00b6 inline fun KiteDslScope.onPause(crossinline onPause: () -> Unit ): Unit Executes the action onPause when receives the lifecycle event Lifecycle.Event.ON_PAUSE .","title":"On pause"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-pause/#onpause","text":"inline fun KiteDslScope.onPause(crossinline onPause: () -> Unit ): Unit Executes the action onPause when receives the lifecycle event Lifecycle.Event.ON_PAUSE .","title":"onPause"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-resume/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / jp.co.cyberagent.kite.core.KiteDslScope / onResume onResume \u00b6 inline fun KiteDslScope.onResume(crossinline onResume: () -> Unit ): Unit Executes the action onResume when receives the lifecycle event Lifecycle.Event.ON_RESUME .","title":"On resume"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-resume/#onresume","text":"inline fun KiteDslScope.onResume(crossinline onResume: () -> Unit ): Unit Executes the action onResume when receives the lifecycle event Lifecycle.Event.ON_RESUME .","title":"onResume"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-start/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / jp.co.cyberagent.kite.core.KiteDslScope / onStart onStart \u00b6 inline fun KiteDslScope.onStart(crossinline onStart: () -> Unit ): Unit Executes the action onStart when receives the lifecycle event Lifecycle.Event.ON_START .","title":"On start"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-start/#onstart","text":"inline fun KiteDslScope.onStart(crossinline onStart: () -> Unit ): Unit Executes the action onStart when receives the lifecycle event Lifecycle.Event.ON_START .","title":"onStart"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-stop/","text":"kite-runtime / jp.co.cyberagent.kite.runtime / jp.co.cyberagent.kite.core.KiteDslScope / onStop onStop \u00b6 inline fun KiteDslScope.onStop(crossinline onStop: () -> Unit ): Unit Executes the action onStop when receives the lifecycle event Lifecycle.Event.ON_STOP .","title":"On stop"},{"location":"api/kite-runtime/jp.co.cyberagent.kite.runtime/jp.co.cyberagent.kite.core.-kite-dsl-scope/on-stop/#onstop","text":"inline fun KiteDslScope.onStop(crossinline onStop: () -> Unit ): Unit Executes the action onStop when receives the lifecycle event Lifecycle.Event.ON_STOP .","title":"onStop"},{"location":"api/kite-testing/","text":"kite-testing Packages \u00b6 Name Summary jp.co.cyberagent.kite.testing Index \u00b6 All Types","title":"kite-testing"},{"location":"api/kite-testing/#packages","text":"Name Summary jp.co.cyberagent.kite.testing","title":"Packages"},{"location":"api/kite-testing/#index","text":"All Types","title":"Index"},{"location":"api/kite-testing/alltypes/","text":"All Types \u00b6 Name Summary jp.co.cyberagent.kite.testing.TestKiteActivity A helper Activity for testing kite DSL in the instrumented test or Robolectric test. jp.co.cyberagent.kite.testing.TestKiteDslScope A scope for testing kite DSL. jp.co.cyberagent.kite.testing.TestKiteFragment A helper Fragment for testing kite DSL in the instrumented test or Robolectric test.","title":"Index"},{"location":"api/kite-testing/alltypes/#all-types","text":"Name Summary jp.co.cyberagent.kite.testing.TestKiteActivity A helper Activity for testing kite DSL in the instrumented test or Robolectric test. jp.co.cyberagent.kite.testing.TestKiteDslScope A scope for testing kite DSL. jp.co.cyberagent.kite.testing.TestKiteFragment A helper Fragment for testing kite DSL in the instrumented test or Robolectric test.","title":"All Types"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/","text":"kite-testing / jp.co.cyberagent.kite.testing Package jp.co.cyberagent.kite.testing \u00b6 Types \u00b6 Name Summary TestKiteActivity class TestKiteActivity : AppCompatActivity A helper Activity for testing kite DSL in the instrumented test or Robolectric test. TestKiteDslScope class TestKiteDslScope : KiteDslScope A scope for testing kite DSL. TestKiteFragment class TestKiteFragment : Fragment A helper Fragment for testing kite DSL in the instrumented test or Robolectric test. Functions \u00b6 Name Summary runTestKiteDsl fun runTestKiteDsl(kiteContext: KiteContext = KiteContext(), testCoroutineScope: TestCoroutineScope = TestCoroutineScope(), block: TestKiteDslScope .() -> Unit ): Unit Runs kite DSL test inside a TestKiteDslScope .","title":"Index"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/#package-jpcocyberagentkitetesting","text":"","title":"Package jp.co.cyberagent.kite.testing"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/#types","text":"Name Summary TestKiteActivity class TestKiteActivity : AppCompatActivity A helper Activity for testing kite DSL in the instrumented test or Robolectric test. TestKiteDslScope class TestKiteDslScope : KiteDslScope A scope for testing kite DSL. TestKiteFragment class TestKiteFragment : Fragment A helper Fragment for testing kite DSL in the instrumented test or Robolectric test.","title":"Types"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/#functions","text":"Name Summary runTestKiteDsl fun runTestKiteDsl(kiteContext: KiteContext = KiteContext(), testCoroutineScope: TestCoroutineScope = TestCoroutineScope(), block: TestKiteDslScope .() -> Unit ): Unit Runs kite DSL test inside a TestKiteDslScope .","title":"Functions"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/run-test-kite-dsl/","text":"kite-testing / jp.co.cyberagent.kite.testing / runTestKiteDsl runTestKiteDsl \u00b6 @ExperimentalCoroutinesApi fun runTestKiteDsl(kiteContext: KiteContext = KiteContext(), testCoroutineScope: TestCoroutineScope = TestCoroutineScope(), block: TestKiteDslScope .() -> Unit ): Unit Runs kite DSL test inside a TestKiteDslScope . Parameters \u00b6 kiteContext - initiate the TestKiteDslScope with this additional context. testCoroutineScope - initiate the TestCoroutineScope with this TestCoroutineDispatcher . block - invoke this test block inside the TestKiteDslScope .","title":"Run test kite dsl"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/run-test-kite-dsl/#runtestkitedsl","text":"@ExperimentalCoroutinesApi fun runTestKiteDsl(kiteContext: KiteContext = KiteContext(), testCoroutineScope: TestCoroutineScope = TestCoroutineScope(), block: TestKiteDslScope .() -> Unit ): Unit Runs kite DSL test inside a TestKiteDslScope .","title":"runTestKiteDsl"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/run-test-kite-dsl/#parameters","text":"kiteContext - initiate the TestKiteDslScope with this additional context. testCoroutineScope - initiate the TestCoroutineScope with this TestCoroutineDispatcher . block - invoke this test block inside the TestKiteDslScope .","title":"Parameters"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteActivity TestKiteActivity \u00b6 class TestKiteActivity : AppCompatActivity A helper Activity for testing kite DSL in the instrumented test or Robolectric test. Types \u00b6 Name Summary Config class Config Defines how to setup kite DSL. Constructors \u00b6 Name Summary <init> TestKiteActivity() A helper Activity for testing kite DSL in the instrumented test or Robolectric test. Functions \u00b6 Name Summary onCreate fun onCreate(savedInstanceState: Bundle?): Unit Companion Object Functions \u00b6 Name Summary makeIntent fun makeIntent(contentLayoutId: Int , config: TestKiteActivity.Config ): Intent Creates an Intent that can launch into this Activity using ActivityScenario with specific configuration.","title":"Index"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/#testkiteactivity","text":"class TestKiteActivity : AppCompatActivity A helper Activity for testing kite DSL in the instrumented test or Robolectric test.","title":"TestKiteActivity"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/#types","text":"Name Summary Config class Config Defines how to setup kite DSL.","title":"Types"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/#constructors","text":"Name Summary <init> TestKiteActivity() A helper Activity for testing kite DSL in the instrumented test or Robolectric test.","title":"Constructors"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/#functions","text":"Name Summary onCreate fun onCreate(savedInstanceState: Bundle?): Unit","title":"Functions"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/#companion-object-functions","text":"Name Summary makeIntent fun makeIntent(contentLayoutId: Int , config: TestKiteActivity.Config ): Intent Creates an Intent that can launch into this Activity using ActivityScenario with specific configuration.","title":"Companion Object Functions"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-init-/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteActivity / <init> <init> \u00b6 TestKiteActivity() A helper Activity for testing kite DSL in the instrumented test or Robolectric test.","title":" init "},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-init-/#init","text":"TestKiteActivity() A helper Activity for testing kite DSL in the instrumented test or Robolectric test.","title":"&lt;init&gt;"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/make-intent/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteActivity / makeIntent makeIntent \u00b6 fun makeIntent(@LayoutRes contentLayoutId: Int , config: TestKiteActivity.Config ): Intent Creates an Intent that can launch into this Activity using ActivityScenario with specific configuration. Parameters \u00b6 contentLayoutId - set the activity content with this layout id. config - setup kite DSL with this config in onCreate .","title":"Make intent"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/make-intent/#makeintent","text":"fun makeIntent(@LayoutRes contentLayoutId: Int , config: TestKiteActivity.Config ): Intent Creates an Intent that can launch into this Activity using ActivityScenario with specific configuration.","title":"makeIntent"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/make-intent/#parameters","text":"contentLayoutId - set the activity content with this layout id. config - setup kite DSL with this config in onCreate .","title":"Parameters"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/on-create/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteActivity / onCreate onCreate \u00b6 protected fun onCreate(savedInstanceState: Bundle?): Unit","title":"On create"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/on-create/#oncreate","text":"protected fun onCreate(savedInstanceState: Bundle?): Unit","title":"onCreate"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteActivity / Config Config \u00b6 class Config Defines how to setup kite DSL. Parameters \u00b6 kiteContext - call kiteDsl with this context. kiteDslBlock - invoke this in the KiteDslScope . Constructors \u00b6 Name Summary <init> Config(kiteContext: KiteContext = KiteContext(), kiteDslBlock: (KiteDslScope.(Activity) -> Unit )? = null) Defines how to setup kite DSL. Properties \u00b6 Name Summary kiteContext val kiteContext: KiteContext call kiteDsl with this context. kiteDslBlock var kiteDslBlock: (KiteDslScope.(Activity) -> Unit )? invoke this in the KiteDslScope .","title":"Index"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/#config","text":"class Config Defines how to setup kite DSL.","title":"Config"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/#parameters","text":"kiteContext - call kiteDsl with this context. kiteDslBlock - invoke this in the KiteDslScope .","title":"Parameters"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/#constructors","text":"Name Summary <init> Config(kiteContext: KiteContext = KiteContext(), kiteDslBlock: (KiteDslScope.(Activity) -> Unit )? = null) Defines how to setup kite DSL.","title":"Constructors"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/#properties","text":"Name Summary kiteContext val kiteContext: KiteContext call kiteDsl with this context. kiteDslBlock var kiteDslBlock: (KiteDslScope.(Activity) -> Unit )? invoke this in the KiteDslScope .","title":"Properties"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/-init-/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteActivity / Config / <init> <init> \u00b6 Config(kiteContext: KiteContext = KiteContext(), kiteDslBlock: (KiteDslScope.(Activity) -> Unit )? = null) Defines how to setup kite DSL. Parameters \u00b6 kiteContext - call kiteDsl with this context. kiteDslBlock - invoke this in the KiteDslScope .","title":" init "},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/-init-/#init","text":"Config(kiteContext: KiteContext = KiteContext(), kiteDslBlock: (KiteDslScope.(Activity) -> Unit )? = null) Defines how to setup kite DSL.","title":"&lt;init&gt;"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/-init-/#parameters","text":"kiteContext - call kiteDsl with this context. kiteDslBlock - invoke this in the KiteDslScope .","title":"Parameters"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/kite-context/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteActivity / Config / kiteContext kiteContext \u00b6 val kiteContext: KiteContext call kiteDsl with this context.","title":"Kite context"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/kite-context/#kitecontext","text":"val kiteContext: KiteContext call kiteDsl with this context.","title":"kiteContext"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/kite-dsl-block/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteActivity / Config / kiteDslBlock kiteDslBlock \u00b6 var kiteDslBlock: (KiteDslScope.(Activity) -> Unit )? invoke this in the KiteDslScope .","title":"Kite dsl block"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-activity/-config/kite-dsl-block/#kitedslblock","text":"var kiteDslBlock: (KiteDslScope.(Activity) -> Unit )? invoke this in the KiteDslScope .","title":"kiteDslBlock"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-dsl-scope/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteDslScope TestKiteDslScope \u00b6 @ExperimentalCoroutinesApi class TestKiteDslScope : KiteDslScope A scope for testing kite DSL. The scope provides some default contextual value for running test synchronously. All dispatchers in KiteCoroutineDispatchers become the TestCoroutineDispatcher of the testCoroutineScope . KiteStateCreator creates thread unsafe state and the value of state will update immediately. MainThreadChecker always assert current thread is the main thread. You can override above default contextual value via kiteContext . Parameters \u00b6 kiteContext - additional context. testCoroutineScope - the coroutine scope of the KiteDslScope . Constructors \u00b6 Name Summary <init> TestKiteDslScope(kiteContext: KiteContext = KiteContext(), testCoroutineScope: TestCoroutineScope = TestCoroutineScope()) A scope for testing kite DSL.","title":"Index"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-dsl-scope/#testkitedslscope","text":"@ExperimentalCoroutinesApi class TestKiteDslScope : KiteDslScope A scope for testing kite DSL. The scope provides some default contextual value for running test synchronously. All dispatchers in KiteCoroutineDispatchers become the TestCoroutineDispatcher of the testCoroutineScope . KiteStateCreator creates thread unsafe state and the value of state will update immediately. MainThreadChecker always assert current thread is the main thread. You can override above default contextual value via kiteContext .","title":"TestKiteDslScope"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-dsl-scope/#parameters","text":"kiteContext - additional context. testCoroutineScope - the coroutine scope of the KiteDslScope .","title":"Parameters"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-dsl-scope/#constructors","text":"Name Summary <init> TestKiteDslScope(kiteContext: KiteContext = KiteContext(), testCoroutineScope: TestCoroutineScope = TestCoroutineScope()) A scope for testing kite DSL.","title":"Constructors"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-dsl-scope/-init-/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteDslScope / <init> <init> \u00b6 TestKiteDslScope(kiteContext: KiteContext = KiteContext(), testCoroutineScope: TestCoroutineScope = TestCoroutineScope()) A scope for testing kite DSL. The scope provides some default contextual value for running test synchronously. All dispatchers in KiteCoroutineDispatchers become the TestCoroutineDispatcher of the testCoroutineScope . KiteStateCreator creates thread unsafe state and the value of state will update immediately. MainThreadChecker always assert current thread is the main thread. You can override above default contextual value via kiteContext . Parameters \u00b6 kiteContext - additional context. testCoroutineScope - the coroutine scope of the KiteDslScope .","title":" init "},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-dsl-scope/-init-/#init","text":"TestKiteDslScope(kiteContext: KiteContext = KiteContext(), testCoroutineScope: TestCoroutineScope = TestCoroutineScope()) A scope for testing kite DSL. The scope provides some default contextual value for running test synchronously. All dispatchers in KiteCoroutineDispatchers become the TestCoroutineDispatcher of the testCoroutineScope . KiteStateCreator creates thread unsafe state and the value of state will update immediately. MainThreadChecker always assert current thread is the main thread. You can override above default contextual value via kiteContext .","title":"&lt;init&gt;"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-dsl-scope/-init-/#parameters","text":"kiteContext - additional context. testCoroutineScope - the coroutine scope of the KiteDslScope .","title":"Parameters"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment TestKiteFragment \u00b6 class TestKiteFragment : Fragment A helper Fragment for testing kite DSL in the instrumented test or Robolectric test. Types \u00b6 Name Summary Config class Config Defines how to setup kite DSL. Properties \u00b6 Name Summary contentLayoutId val contentLayoutId: Int Functions \u00b6 Name Summary onViewCreated fun onViewCreated(view: View, savedInstanceState: Bundle?): Unit Companion Object Functions \u00b6 Name Summary makeFactory fun makeFactory(contentLayoutId: Int , config: TestKiteFragment.Config ): FragmentFactory Creates a FragmentFactory that can instantiate this Fragment using FragmentScenario .","title":"Index"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/#testkitefragment","text":"class TestKiteFragment : Fragment A helper Fragment for testing kite DSL in the instrumented test or Robolectric test.","title":"TestKiteFragment"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/#types","text":"Name Summary Config class Config Defines how to setup kite DSL.","title":"Types"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/#properties","text":"Name Summary contentLayoutId val contentLayoutId: Int","title":"Properties"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/#functions","text":"Name Summary onViewCreated fun onViewCreated(view: View, savedInstanceState: Bundle?): Unit","title":"Functions"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/#companion-object-functions","text":"Name Summary makeFactory fun makeFactory(contentLayoutId: Int , config: TestKiteFragment.Config ): FragmentFactory Creates a FragmentFactory that can instantiate this Fragment using FragmentScenario .","title":"Companion Object Functions"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/content-layout-id/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / contentLayoutId contentLayoutId \u00b6 val contentLayoutId: Int","title":"Content layout id"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/content-layout-id/#contentlayoutid","text":"val contentLayoutId: Int","title":"contentLayoutId"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/make-factory/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / makeFactory makeFactory \u00b6 fun makeFactory(@LayoutRes contentLayoutId: Int , config: TestKiteFragment.Config ): FragmentFactory Creates a FragmentFactory that can instantiate this Fragment using FragmentScenario . Parameters \u00b6 contentLayoutId - set the fragment content with this layout id. config - setup kite DSL with this config in onViewCreated .","title":"Make factory"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/make-factory/#makefactory","text":"fun makeFactory(@LayoutRes contentLayoutId: Int , config: TestKiteFragment.Config ): FragmentFactory Creates a FragmentFactory that can instantiate this Fragment using FragmentScenario .","title":"makeFactory"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/make-factory/#parameters","text":"contentLayoutId - set the fragment content with this layout id. config - setup kite DSL with this config in onViewCreated .","title":"Parameters"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/on-view-created/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / onViewCreated onViewCreated \u00b6 fun onViewCreated(view: View, savedInstanceState: Bundle?): Unit","title":"On view created"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/on-view-created/#onviewcreated","text":"fun onViewCreated(view: View, savedInstanceState: Bundle?): Unit","title":"onViewCreated"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / Config Config \u00b6 class Config Defines how to setup kite DSL. Parameters \u00b6 storeOwner - the owner of the state. The default value is the fragment itself. kiteContext - call kiteDsl with this context. kiteDslBlock - invoke this in the KiteDslScope . Types \u00b6 Name Summary StoreOwner enum class StoreOwner Constructors \u00b6 Name Summary <init> Config(storeOwner: TestKiteFragment.Config.StoreOwner = StoreOwner.SELF, kiteContext: KiteContext = KiteContext(), kiteDslBlock: (KiteDslScope.(Fragment) -> Unit )? = null) Defines how to setup kite DSL. Properties \u00b6 Name Summary kiteContext val kiteContext: KiteContext call kiteDsl with this context. kiteDslBlock val kiteDslBlock: (KiteDslScope.(Fragment) -> Unit )? invoke this in the KiteDslScope . storeOwner val storeOwner: TestKiteFragment.Config.StoreOwner the owner of the state. The default value is the fragment itself.","title":"Index"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/#config","text":"class Config Defines how to setup kite DSL.","title":"Config"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/#parameters","text":"storeOwner - the owner of the state. The default value is the fragment itself. kiteContext - call kiteDsl with this context. kiteDslBlock - invoke this in the KiteDslScope .","title":"Parameters"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/#types","text":"Name Summary StoreOwner enum class StoreOwner","title":"Types"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/#constructors","text":"Name Summary <init> Config(storeOwner: TestKiteFragment.Config.StoreOwner = StoreOwner.SELF, kiteContext: KiteContext = KiteContext(), kiteDslBlock: (KiteDslScope.(Fragment) -> Unit )? = null) Defines how to setup kite DSL.","title":"Constructors"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/#properties","text":"Name Summary kiteContext val kiteContext: KiteContext call kiteDsl with this context. kiteDslBlock val kiteDslBlock: (KiteDslScope.(Fragment) -> Unit )? invoke this in the KiteDslScope . storeOwner val storeOwner: TestKiteFragment.Config.StoreOwner the owner of the state. The default value is the fragment itself.","title":"Properties"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-init-/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / Config / <init> <init> \u00b6 Config(storeOwner: TestKiteFragment.Config.StoreOwner = StoreOwner.SELF, kiteContext: KiteContext = KiteContext(), kiteDslBlock: (KiteDslScope.(Fragment) -> Unit )? = null) Defines how to setup kite DSL. Parameters \u00b6 storeOwner - the owner of the state. The default value is the fragment itself. kiteContext - call kiteDsl with this context. kiteDslBlock - invoke this in the KiteDslScope .","title":" init "},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-init-/#init","text":"Config(storeOwner: TestKiteFragment.Config.StoreOwner = StoreOwner.SELF, kiteContext: KiteContext = KiteContext(), kiteDslBlock: (KiteDslScope.(Fragment) -> Unit )? = null) Defines how to setup kite DSL.","title":"&lt;init&gt;"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-init-/#parameters","text":"storeOwner - the owner of the state. The default value is the fragment itself. kiteContext - call kiteDsl with this context. kiteDslBlock - invoke this in the KiteDslScope .","title":"Parameters"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/kite-context/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / Config / kiteContext kiteContext \u00b6 val kiteContext: KiteContext call kiteDsl with this context.","title":"Kite context"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/kite-context/#kitecontext","text":"val kiteContext: KiteContext call kiteDsl with this context.","title":"kiteContext"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/kite-dsl-block/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / Config / kiteDslBlock kiteDslBlock \u00b6 val kiteDslBlock: (KiteDslScope.(Fragment) -> Unit )? invoke this in the KiteDslScope .","title":"Kite dsl block"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/kite-dsl-block/#kitedslblock","text":"val kiteDslBlock: (KiteDslScope.(Fragment) -> Unit )? invoke this in the KiteDslScope .","title":"kiteDslBlock"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/store-owner/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / Config / storeOwner storeOwner \u00b6 val storeOwner: TestKiteFragment.Config.StoreOwner the owner of the state. The default value is the fragment itself.","title":"Store owner"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/store-owner/#storeowner","text":"val storeOwner: TestKiteFragment.Config.StoreOwner the owner of the state. The default value is the fragment itself.","title":"storeOwner"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-store-owner/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / Config / StoreOwner StoreOwner \u00b6 enum class StoreOwner Enum Values \u00b6 Name Summary SELF PARENT_ACTIVITY PARENT_FRAGMENT","title":"Index"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-store-owner/#storeowner","text":"enum class StoreOwner","title":"StoreOwner"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-store-owner/#enum-values","text":"Name Summary SELF PARENT_ACTIVITY PARENT_FRAGMENT","title":"Enum Values"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-store-owner/-p-a-r-e-n-t_-a-c-t-i-v-i-t-y/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / Config / StoreOwner / PARENT_ACTIVITY PARENT_ACTIVITY \u00b6 PARENT_ACTIVITY","title":" p a r e n t  a c t i v i t y"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-store-owner/-p-a-r-e-n-t_-a-c-t-i-v-i-t-y/#parent_activity","text":"PARENT_ACTIVITY","title":"PARENT_ACTIVITY"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-store-owner/-p-a-r-e-n-t_-f-r-a-g-m-e-n-t/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / Config / StoreOwner / PARENT_FRAGMENT PARENT_FRAGMENT \u00b6 PARENT_FRAGMENT","title":" p a r e n t  f r a g m e n t"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-store-owner/-p-a-r-e-n-t_-f-r-a-g-m-e-n-t/#parent_fragment","text":"PARENT_FRAGMENT","title":"PARENT_FRAGMENT"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-store-owner/-s-e-l-f/","text":"kite-testing / jp.co.cyberagent.kite.testing / TestKiteFragment / Config / StoreOwner / SELF SELF \u00b6 SELF","title":" s e l f"},{"location":"api/kite-testing/jp.co.cyberagent.kite.testing/-test-kite-fragment/-config/-store-owner/-s-e-l-f/#self","text":"SELF","title":"SELF"}]}